{
  "hash": "ff8da12593db6cfc243bf3e872a9f6f4",
  "result": {
    "markdown": "---\ntitle: \"Beginner's guide: Make a quick map of species observations in Python and R\"\ndescription: |\n  The ability to make a map quickly is an essential skill in ecology and conservation. This post shows how to make a quick, simple map of Peron's tree frog occurrences & set a custom font using either Python or R.\nauthor:\n  - name: \"Amanda Buyan\"\n  - name: \"Dax Kellie\"\ndate: \"2023-12-18\"\ntitle-block-banner: \"#B8573E\"\ninclude-after-body: _footer.html\ntoc: true\ntoc-location: left\ntoc-depth: 2\ncategories:\n  - Eukaryota\n  - Animalia\n  - Chordata\n  - Anura\n  - Maps\n  - Python\n  - R\nimage: map_tree-frog.png\nfreeze: true\nengine: knitr\njupyter: python3\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- remove metadata section -->\n<style>\n  #title-block-header.quarto-title-block.default .quarto-title-meta {\n      display: none;\n  }\n</style>\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\n[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n18 December 2023\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nMaps are one of the most common and useful data visualisation tools in an ecologist's tool belt. Making a quick and simple map of species observations is especially useful when first investigating where a species has occurred. Viewing locations of points can also help to understand the extent of your data (and spot possible errors or outliers). \n\nIn this post, we will use either Python or R to make a map of observations of Peron's tree frog (*Litoria peronii*) in New South Wales since 2018 recorded by FrogID.\n\n::: {.panel-tabset .nav-pills}\n\n# Python\n\n## Download data\n\nPeron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)\n:::\n\nFirst, let's import `galah-python`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport galah\n```\n:::\n\n\n\n### Search for taxa\n\nWhen trying to download data about any species or clade, we can search using `search_taxa()`. It's recommended to use `search_taxa()` to check whether a taxonomic search returns what you were expecting (even if you know the scientific name)! We can check taxonomic information about Peron's tree frog with `search_taxa()`, which returns extra details about the species when a match is found.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_taxa(\"Litoria peronii\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    scientificName scientificNameAuthorship  ...     vernacularName   issues\n0  Litoria peronii          (Tschudi, 1838)  ...  Peron's Tree Frog  noIssue\n\n[1 rows x 12 columns]\n```\n:::\n:::\n\n\n### Search for fields\n\nNext, we can search for fields and field IDs for filtering our query. In this case, we are interested in filtering to a specific year, state/territory and data resource. \n\nWe can start by searching for any fields containing the word \"year\" using `search_all()`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_all(\n  fields=\"year\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                    id                                        description   type                                               link\n0                 year  The year in which an occurrence was observed. ...  field  https://github.com/AtlasOfLivingAustralia/ala-...\n1         endDayOfYear          http://rs.tdwg.org/dwc/terms/endDayOfYear  field                                                NaN\n2        datePrecision  The precision of the date information for the ...  field                                                NaN\n3       occurrenceYear  Year ranges for a search. Calculated based on ...  field                                                NaN\n4       startDayOfYear        http://rs.tdwg.org/dwc/terms/startDayOfYear  field                                                NaN\n5  namePublishedInYear   http://rs.tdwg.org/dwc/terms/namePublishedInYear  field                                                NaN\n```\n:::\n:::\n\n\nWe can do the same kind of search to find fields with information of australian states/territories and data resource names.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_all(\n  fields=\"states\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n        id                                        description    type link\n0     cl22  Australian States and Territories Australian S...  layers     \n1    cl927  States including coastal waters States (includ...  layers     \n2   cl2013  ASGS Australian States and Territories Austral...  layers     \n3  cl10902  Forests of Australia (2013) v2.0 Forests of Au...  layers     \n4  cl10903  Tenure of Australia's forests (2013) v2.0 Tenu...  layers     \n5  cl10925     PSMA States (2016) Australian State boundaries  layers     \n6  cl10930  NRM Regions 2017 The Natural Resource Manageme...  layers     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_all(\n  fields=\"dataresourcename\"\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                     id                                        description   type link\n0       dataResourceUid  A list (concatenated and separated) of prepara...  field  NaN\n1      dataResourceName  The data resource that supplies the record. Th...  field  NaN\n2   raw_dataResourceUid                                                NaN  field  NaN\n3  raw_dataResourceName                                                NaN  field  NaN\n```\n:::\n:::\n\n\nIf you are ever uncertain which field ID to choose, you can use `show_values()` to see what possible values are *within* a field. For example, let's see what values are in field ID `cl22`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.show_values(field=\"cl22\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   field                      category\n0   cl22               New South Wales\n1   cl22                      Victoria\n2   cl22                    Queensland\n3   cl22               South Australia\n4   cl22             Western Australia\n5   cl22            Northern Territory\n6   cl22  Australian Capital Territory\n7   cl22                      Tasmania\n8   cl22                      Unknown1\n9   cl22             Coral Sea Islands\n10  cl22   Ashmore and Cartier Islands\n```\n:::\n:::\n\n\nWe can also search for a value using `search_values()`, which might be handy to check that \"FrogID\" is a value in `dataResourceName`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_values(field=\"dataResourceName\", value=\"frogid\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n              field category\n0  dataResourceName   FrogID\n```\n:::\n:::\n\n\n### Download observations\n\nNow we are ready to build our query to download observations of Peron's tree frog in New South Wales since 2018 recorded by FrogID. \n\nFor those unfamiliar with Australian geography, New South Wales is this one:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nFirst, let's find the number of records that match our query. This is good practice before downloading occurrence records because you can check exactly how many records you are intending to download (and avoid an accidental massive download)! \n\nWe'll use `atlas_counts()` to download record counts, specifying the taxon using the `taxa` argument, and narrowing the year range, state/territory and data resource using the `filters` argument.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.atlas_counts(                      # *Download record counts*\n    taxa=\"litoria peronii\",              # *of Peron's tree frog*\n    filters=[\"year>=2018\",               # *since 2018*\n             \"cl22=New South Wales\",     # *in New South Wales*\n             \"dataResourceName=FrogID\"]  # *by FrogID*\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   totalRecords\n0         27647\n```\n:::\n:::\n\n\nNow we can use `atlas_occurrences()` to download occurrence records, which returns each observation's location coordinates and event date.\n\nYou will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.galah_config(email = \"your-email-here\")\nfrogs = galah.atlas_occurrences(\n    taxa=\"litoria peronii\",\n    filters=[\"year>=2018\",\n             \"cl22=New South Wales\",\n             \"dataResourceName=FrogID\"]\n)\nfrogs\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n       decimalLatitude  decimalLongitude             eventDate   scientificName                                     taxonConceptID                              recordID dataResourceName occurrenceStatus\n0           -37.246800        149.375000  2020-12-27T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  a5cd2fcd-5225-4d19-977c-b16ca5e8f1dd           FrogID          PRESENT\n1           -37.089036        149.699526  2020-12-14T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  eebde5ef-cac4-4897-af00-cb2e39a0684f           FrogID          PRESENT\n2           -37.077693        149.874402  2018-01-06T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  35340478-97c1-48a4-a463-991fe3a8daa0           FrogID          PRESENT\n3           -37.077241        149.874787  2018-01-06T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  a7abc9f3-362f-469e-9076-5b55a2447b69           FrogID          PRESENT\n4           -37.070746        149.896011  2020-12-13T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  1cc9dda8-f2d4-4f55-acf6-11c93b26da9e           FrogID          PRESENT\n...                ...               ...                   ...              ...                                                ...                                   ...              ...              ...\n27642       -28.207514        153.442592  2018-11-15T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  b094fed1-5bff-4df8-b556-cabd693c533a           FrogID          PRESENT\n27643       -28.207472        153.442497  2018-11-15T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  5cc24fbd-8c6b-4a76-9b28-fec76ee08f37           FrogID          PRESENT\n27644       -28.207442        153.442328  2020-02-07T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  61aa50a1-4c79-4fc3-b3ab-93538faa37b1           FrogID          PRESENT\n27645       -28.207108        153.443021  2021-02-19T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  0324b8d1-77b0-4bf3-9ec2-6ad9efff18f2           FrogID          PRESENT\n27646       -28.186157        153.445556  2018-11-16T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  bcf83a54-a900-4265-960a-9436356a7107           FrogID          PRESENT\n\n[27647 rows x 8 columns]\n```\n:::\n:::\n\n\n\n\n## Make a map\n\nIt's time to make our map!  \n\nIn order to draw our map of New South Wales, we'll download a shapefile of the latest [state and territory boundaries from the Australian Bureau of statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Download the \"States and Territories - 2021 - Shapefile\" zip file, and save the zip file in the same folder you are coding in.\n\nLet's load our States and Territories shapefile with `read_file()` and save it as `states`. Then, we will filter the shapefile to New South Wales and quickly plot it (specifying that the edges are black, the inside is white, and the figure size is 12 x 6 inches).\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom matplotlib import pyplot as plt\nimport geopandas as gpd\n\n# Load Australian state and territory boundaries\nstates = gpd.read_file(\"STE_2021_AUST_GDA94.shp\")\n\n# Filter to New South Wales and plot\nstates[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-22-1.png){width=1152}\n:::\n:::\n\n\nOur shapefile has plotted nicely, but there are many different ways to display our shape of NSW, which exists on a spherical globe (the Earth), onto a flat surface (our map). Our shapefile already has a projection, determined by its Coordinate Reference System (CRS) of GDA94.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# see the details of our shape's CRS\nnsw.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Geographic 2D CRS: EPSG:4283>\nName: GDA94\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: Australia including Lord Howe Island, Macquarie Island, Ashmore and Cartier Islands, Christmas Island, Cocos (Keeling) Islands, Norfolk Island. All onshore and offshore.\n- bounds: (93.41, -60.55, 173.34, -8.47)\nDatum: Geocentric Datum of Australia 1994\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nTo make it clearer how the CRS changes the projection of a map, here are 3 maps of NSW projected with 3 different CRS: \n\n  *  GDA94 (the current projection of our NSW shapefile) \n  *  EPSG:8058 (a state/territory-specific projection for NSW)\n  *  EPSG:2955 (intended for Canadian territories)\n\n:::{layout-ncol=3 .column-body-outset}\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nnsw.plot(edgecolor = \"#5A5A5A\", facecolor = \"white\")\n```\n\n::: {.cell-output-display}\n![GDA94](post_files/figure-html/unnamed-chunk-24-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nnsw_gda2020 = nsw.to_crs(8058)\nnsw_gda2020.plot(edgecolor = \"#5A5A5A\", facecolor = \"white\")\n```\n\n::: {.cell-output-display}\n![EPSG:8058](post_files/figure-html/unnamed-chunk-25-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nnsw_nad83 = nsw.to_crs(2955)\nnsw_nad83.plot(edgecolor = \"#5A5A5A\", facecolor = \"white\")\n```\n\n::: {.cell-output-display}\n![EPSG:2955](post_files/figure-html/unnamed-chunk-26-7.png){width=672}\n:::\n:::\n\n\n:::\n\nThe CRS projection of ALA data is EPSG:4326 (also known as \"WGS84\"). Reprojecting the CRS of our shapefile allows us to make sure the points of our data align correctly with our shapefile.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnsw = nsw.to_crs(4326)\n```\n:::\n\n\nNow, we will add species observations to our map. First, we will plot our reprojected shapefile. Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis.  We'll set the colour (`c`) and adjust the `alpha` to make our points partially transparent.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnsw.plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\nplt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = \"#6fab3f\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-28-9.png){width=1152}\n:::\n:::\n\n\nFor some final touches (to make the map prettier), we can add a title and remove the border.\n\nWe’ll add a custom Google font, [Roboto](https://fonts.google.com/specimen/Roboto), by downloading it from Google Fonts, saving the folder in your current directory, unzipping the folder, and loading it with the `matplotlib` library.  \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib as mpl\nfrom matplotlib import font_manager\nfont_files = font_manager.findSystemFonts(fontpaths=\"Roboto/\")\nfor ff in font_files:\n  font_manager.fontManager.addfont(ff)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nFor further information or troubleshooting tips for installing Roboto on your computer, [this post](https://python-graph-gallery.com/custom-fonts-in-matplotlib/) is an excellent guide, as well as the [matplotlib.font_manager documentation](https://matplotlib.org/stable/api/font_manager_api.html).\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnsw.plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\nplt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = \"#6fab3f\", alpha = 0.5, label = \"Litoria peronii\")\nplt.suptitle(\"Peron's tree frog\",fontsize=36,font='Roboto')\nplt.title(\"FrogID observations in New South Wales since 2018\",fontsize=28,font='Roboto')\nplt.axis('off')\n```\n:::\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n(140.0937672995, 160.0147167105, -37.972572696499995, -27.6894786335)\n```\n:::\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-32-11.png){fig-align='center' width=2304}\n:::\n:::\n\n\nTo save your plot in your current folder, you can use:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.savefig(\"perons_tree_frog_nsw.png\")\n```\n:::\n\n\n\n## Final thoughts\n\nWe hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in Python, check out our ALA Labs article on [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).\n\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n-----\ngalah               0.7.0\ngeopandas           0.14.1\nmatplotlib          3.8.2\nnatsort             8.4.0\npandas              2.1.3\nsession_info        1.0.0\n-----\nPython 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]\nWindows-10-10.0.19045-SP0\n-----\nSession information updated at 2023-12-19 17:15\n```\n:::\n:::\n\n\n</details>\n\n\n\n# R\n\n## Download data\n\nPeron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)\n:::\n\nFirst, let's load some packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(galah)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(here)\nlibrary(showtext)\n```\n:::\n\n\n\n\n### Search for taxa\n\nWhen trying to download data about any species or clade, we can search using `search_taxa()`. It's recommended to use `search_taxa()` to check whether a taxonomic search returns what you were expecting (even if you know the scientific name)! We can check taxonomic information about Peron's tree frog with `search_taxa()`, which returns extra details about the species when a match is found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_taxa(\"Litoria peronii\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 15\n  search_term     scientific_name scientific_name_autho…¹ taxon_concept_id rank \n  <chr>           <chr>           <chr>                   <chr>            <chr>\n1 Litoria peronii Litoria peronii (Tschudi, 1838)         https://biodive… spec…\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 10 more variables: match_type <chr>, kingdom <chr>, phylum <chr>,\n#   class <chr>, order <chr>, family <chr>, genus <chr>, species <chr>,\n#   vernacular_name <chr>, issues <chr>\n```\n:::\n:::\n\n\n### Search for fields\n\nNext, we can search for fields and field IDs for filtering our query. In this case, we are interested in filtering to a specific year, state/territory and data resource. \n\nWe can start by searching for any fields containing the word \"year\" using `search_all()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  id                  description            type  \n  <chr>               <chr>                  <chr> \n1 year                Year                   fields\n2 raw_year            Year (unprocessed)     fields\n3 endDayOfYear        End Day Of Year        fields\n4 startDayOfYear      Start Day Of Year      fields\n5 occurrenceYear      Date (by decade)       fields\n6 raw_endDayOfYear    <NA>                   fields\n7 raw_startDayOfYear  <NA>                   fields\n8 namePublishedInYear Name Published In Year fields\n```\n:::\n:::\n\n\nWe can do the same kind of search to find fields with information of australian states/territories and data resource names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"states\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  id       description                            type  \n  <chr>    <chr>                                  <chr> \n1 cl2013   ASGS Australian States and Territories fields\n2 cl22     Australian States and Territories      fields\n3 cl927    States including coastal waters        fields\n4 cl10925  PSMA States (2016)                     fields\n5 cl110925 PSMA States - Abbreviated (2016)       fields\n```\n:::\n\n```{.r .cell-code}\nsearch_all(fields, \"resource\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  id                     description              type  \n  <chr>                  <chr>                    <chr> \n1 resourceID             Resource ID              fields\n2 dataResourceUid        Dataset                  fields\n3 dataResourceName       Dataset                  fields\n4 relatedResourceID      Related Resource ID      fields\n5 raw_dataResourceUid    Dataset (unprocessed)    fields\n6 raw_dataResourceName   Dataset (unprocessed)    fields\n7 relationshipOfResource Relationship Of Resource fields\n8 resourceRelationshipID Resource Relationship ID fields\n```\n:::\n:::\n\n\nIf you are ever uncertain which field ID to choose, you can use `show_values()` to see what possible values are *within* a field. For example, let's see what values are in field ID `cl22`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"cl22\") |>\n  show_values()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n• Showing values for 'cl22'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 1\n   cl22                        \n   <chr>                       \n 1 New South Wales             \n 2 Victoria                    \n 3 Queensland                  \n 4 South Australia             \n 5 Western Australia           \n 6 Northern Territory          \n 7 Australian Capital Territory\n 8 Tasmania                    \n 9 Unknown1                    \n10 Coral Sea Islands           \n11 Ashmore and Cartier Islands \n```\n:::\n:::\n\n\nWe can also search for a value using `search_values()`, which might be handy to check that \"FrogID\" is a value in `dataResourceName`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"dataResourceName\") |>\n  search_values(\"FrogID\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Search returned 2 matched fields.\n• Showing values for 'dataResourceName'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 1\n# ℹ 1 variable: dataResourceName <chr>\n```\n:::\n:::\n\n\n### Download observations\n\nNow we are ready to build our query to download observations of Peron's tree frog in New South Wales since 2018 recorded by FrogID. \n\nFor those unfamiliar with Australian geography, New South Wales is this one:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nFirst, let's find the number of records that match our query. This is good practice before downloading occurrence records because you can check exactly how many records you are intending to download (and avoid an accidental massive download)! \n\nWe'll use `atlas_counts()` to download record counts, specifying the taxon using `galah_identify()`, and narrowing the year range, state/territory and data resource using `galah_filter()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngalah_call() |>                                 # Begin a query\n  galah_identify(\"Litoria peronii\") |>          # Peron's tree frog\n  galah_filter(year >= 2018,                    # since 2018\n               cl22 == \"New South Wales\",       # in New South Wales\n               dataResourceName == \"FrogID\") |> # by FrogID\n  atlas_counts()                                # Download record counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  count\n  <int>\n1 27647\n```\n:::\n:::\n\n\nNow we can use `atlas_occurrences()` to download occurrence records, which returns each observation's location coordinates and event date.\n\nYou will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngalah_config(email = \"your-email-here\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfrogs <- galah_call() |>\n  galah_identify(\"Litoria peronii\") |>\n  galah_filter(year >= 2018,\n               cl22 == \"New South Wales\",\n               dataResourceName == \"FrogID\") |>\n  atlas_occurrences()\nfrogs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27,647 × 8\n   recordID       scientificName taxonConceptID decimalLatitude decimalLongitude\n   <chr>          <chr>          <chr>                    <dbl>            <dbl>\n 1 0008c41d-fd35… Litoria peron… https://biodi…           -33.2             152.\n 2 000c1c20-bec3… Litoria peron… https://biodi…           -33.0             150.\n 3 000e46ad-9ace… Litoria peron… https://biodi…           -31.3             149.\n 4 001229c0-4c48… Litoria peron… https://biodi…           -33.7             150.\n 5 0014b8ff-ddd5… Litoria peron… https://biodi…           -33.4             151.\n 6 00183dd1-c9cd… Litoria peron… https://biodi…           -36.6             150.\n 7 002088e5-3a73… Litoria peron… https://biodi…           -32.1             150.\n 8 002108e1-9933… Litoria peron… https://biodi…           -33.7             151.\n 9 00251c30-9dfd… Litoria peron… https://biodi…           -34.3             151.\n10 00259fce-87db… Litoria peron… https://biodi…           -30.5             153.\n# ℹ 27,637 more rows\n# ℹ 3 more variables: eventDate <dttm>, occurrenceStatus <chr>,\n#   dataResourceName <chr>\n```\n:::\n:::\n\n\n## Make a map\n\nIt's time to make our map!  \n\nIn order to draw our map of New South Wales, we'll download a shapefile of the latest [state and territory boundaries from the Australian Bureau of Statistics](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Download the \"States and Territories - 2021 - Shapefile\" zip file, and save the zip file in the same folder you are coding in.\n\nLet's load our States and Territories shapefile with `read_file()` and save it as `states`. Then, we will filter the shapefile to New South Wales and quickly plot it to check it plots correctly (specifying that the border is grey, and the inside is white).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Australian state and territory boundaries\nstates <- st_read(here(\"STE_2021_AUST_GDA94.shp\"),\n                  quiet = TRUE)\n\n# Filter to New South Wales\nnsw <- states |> \n  filter(STE_NAME21 == \"New South Wales\")\n\n# Plot\nggplot() +\n  geom_sf(data = nsw,\n          colour = \"grey60\",\n          fill = \"white\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nOur shapefile has plotted nicely, but there are many different ways to display our shape of NSW, which exists on a spherical globe (the Earth), onto a flat surface (our map). Our shapefile already has a projection, determined by its Coordinate Reference System (CRS) of GDA94.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see the details of our shape's geometry\nnsw |> st_geometry()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 1 feature \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 140.9993 ymin: -37.50516 xmax: 159.1092 ymax: -28.15689\nGeodetic CRS:  GDA94\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMULTIPOLYGON (((159.0623 -31.50887, 159.0622 -3...\n```\n:::\n:::\n\n\nTo make it clearer how the CRS changes the projection of a map, here are 3 maps of NSW projected with 3 different CRS:  \n\n  *  GDA94 (the current projection of our NSW shapefile) \n  *  EPSG:8058 (a state/territory-specific projection for NSW)\n  *  EPSG:2955 (intended for Canadian territories)\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" fig-column='body-outset'}\n\n```{.r .cell-code  code-fold=\"true\"}\nnsw |> \n  ggplot() +\n  geom_sf(colour = \"grey60\",\n          fill = \"white\")\n```\n\n::: {.cell-output-display}\n![GDA94](post_files/figure-html/unnamed-chunk-50-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nnsw |> \n  st_transform(crs = st_crs(8058)) |>\n  ggplot() +\n  geom_sf(colour = \"grey60\",\n          fill = \"white\")\n```\n\n::: {.cell-output-display}\n![EPSG:8058](post_files/figure-html/unnamed-chunk-50-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nnsw |> \n  st_transform(crs = st_crs(2955)) |>\n  ggplot() +\n  geom_sf(colour = \"grey60\",\n          fill = \"white\")\n```\n\n::: {.cell-output-display}\n![EPSG:2955](post_files/figure-html/unnamed-chunk-50-3.png){fig-align='center' width=672}\n:::\n:::\n\n\nData from the ALA use CRS EPSG:4326 (also known as \"WGS84\"). Reprojecting our shapefile to the same CRS allows us to make sure the points of our data align correctly with our shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnsw <- nsw |>\n  st_transform(crs = st_crs(4326))\n```\n:::\n\n\nNow, we will add species observations to our map. First, we will plot our reprojected shapefile. Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis. We'll set the `colour` and adjust the `alpha` to make our points partially transparent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = nsw,\n          colour = \"grey60\",\n          fill = \"white\") +\n  geom_point(data = frogs,\n             aes(x = decimalLongitude,\n                 y = decimalLatitude),\n             colour = \"#6fab3f\",\n             alpha = 0.5,\n             size = 1.1)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nFor some final touches (to make the map prettier), we can add a centred title and add a minimal theme.\n\nWe'll add a custom Google font, [Roboto](https://fonts.google.com/specimen/Roboto), using the showtext package, loading it into R with `font_add_google()`.\n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add font\nfont_add_google(\"Roboto\")\nshowtext_auto(enable = TRUE)\n\nggplot() +\n  geom_sf(data = nsw,\n          colour = \"grey60\",\n          fill = \"white\") +\n  geom_point(data = frogs,\n             mapping = aes(x = decimalLongitude,\n                           y = decimalLatitude),\n             colour = \"#6fab3f\",\n             alpha = 0.5,\n             size = 1.1) +\n  labs(title = \"Peron's tree frog\",\n       subtitle = \"FrogID observations in New South Wales since 2018\") +\n  theme_void() + \n  theme(\n    plot.title = element_text(hjust = 0.5,          # horizontally centre\n                              family = \"Roboto\",    # add font\n                              size = 31),           # change font size\n    plot.subtitle = element_text(hjust = 0.5,       # horizontally centre\n                                 family = \"Roboto\", # add font\n                                 size = 25)         # change font size\n  )\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-53-1.png){fig-align='center' width=960}\n:::\n:::\n\n\nTo save your plot in your current folder, you can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set dpi for text\nshowtext_opts(dpi = 320)\n\n# save\nggsave(here(\"map_perons-tree-frog.png\"),\n       height = 9, width = 10,\n       unit = \"in\",\n       dpi = 320)\n```\n:::\n\n\n## Final thoughts\n\nWe hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in R, check out our ALA Labs articles on [exploring dingo observations](https://labs.ala.org.au/posts/2023-05-16_dingoes/post.html) and [how to make a choropleth map with multiple colour scales](https://labs.ala.org.au/posts/2022-05-23-ggnewscale/post.html).\n\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sessioninfo' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2023-12-19\n pandoc   2.12 @ C:/Users/KEL329/ANACON~1/Scripts/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.3.2)\n galah       * 2.0.0   2023-12-11 [1] Github (AtlasOfLivingAustralia/galah-R@be472e8)\n ggplot2     * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.3.2)\n htmltools   * 0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf          * 1.0-14  2023-07-11 [1] CRAN (R 4.3.2)\n showtext    * 0.9-6   2023-05-03 [1] CRAN (R 4.3.2)\n showtextdb  * 3.0     2020-06-04 [1] CRAN (R 4.3.2)\n sysfonts    * 0.8.8   2022-03-13 [1] CRAN (R 4.3.2)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.3.1/library\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         C:/Users/KEL329/OneDrive - CSIRO/Documents/ALA/Github/ala-labs/.venv/Scripts/python.exe\n libpython:      C:/Users/KEL329/AppData/Local/Programs/Python/Python312/python312.dll\n pythonhome:     C:/Users/KEL329/OneDrive - CSIRO/Documents/ALA/Github/ala-labs/.venv\n version:        3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]\n Architecture:   64bit\n numpy:          C:/Users/KEL329/OneDrive - CSIRO/Documents/ALA/Github/ala-labs/.venv/Lib/site-packages/numpy\n numpy_version:  1.26.2\n \n NOTE: Python version was forced by VIRTUAL_ENV\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n\n:::\n",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}