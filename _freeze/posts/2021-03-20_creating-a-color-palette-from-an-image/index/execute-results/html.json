{
  "hash": "f67284ac5088cbc22ea3bde399313f69",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating a color palette from an image\"\ndescription: |\n  There are hundreds of color palettes in the R ecosystem, but sometimes we\n  might want to use colors from a specific image. Here I show how to \n  use the `paletter` package to create a color palette for the 2020 Eucalypt of \n  the Year: the Western Australian Gimlet.\nauthor: \"Martin Westgate\"\ndate: \"01/03/2021\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 3\ncategories:\n  - Summaries \n  - Eukaryota\n  - Plantae\n  - R\nimage: colour-dot-matrix.png\nfreeze: true\n---\n\n\n<!-- Complete title, description, author and date for website metadata -->\n\n\n\n\n\n<!-- remove metadata section -->\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\n[Martin Westgate](https://labs.ala.org.au/about/Westgate_Martin/index.html)  \n\n#### Date\nMarch 2021\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/martin.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n\n# Colors in R\n\nColor palettes are important to people, and the R ecosystem includes literally \nhundreds of possible palettes. If you want a \"complete\" list, go and check out\nEmil Hvitfeldt's list of palettes [here](https://github.com/EmilHvitfeldt/r-color-palettes);\nbut in practice there are only a few that we use routinely. Our default at ALA labs\nis to use `viridis` for continuous scales, because (to quote their [CRAN page](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)) it's color-blind friendly, \nperceptually uniform, and pretty. The default purple-green-yellow color scheme is lovely, but I'm \na big fan of 'magma', which has a black-purple-orange-yellow scheme\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(galah)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(viridis)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get field code for states/territories\nsearch_fields(\"state\") # layer: cl22 OR stateProvince\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 3\n   id                    description                                      type  \n   <chr>                 <chr>                                            <chr> \n 1 cl22                  Australian States and Territories                fields\n 2 cl927                 States including coastal waters                  fields\n 3 cl938                 Fruit Fly Exclusion Zone - Tri State             fields\n 4 cl2013                ASGS Australian States and Territories           fields\n 5 cl10900               Australia's Indigenous forest estate (2013) v2.0 fields\n 6 cl10922               PSMA State Electoral Boundaries (2018)           fields\n 7 cl10925               PSMA States (2016)                               fields\n 8 cl110922              PSMA State Electoral Boundary Classes (2018)     fields\n 9 cl110925              PSMA States - Abbreviated (2016)                 fields\n10 stateInvasive         <NA>                                             fields\n11 stateProvince         State/Territory                                  fields\n12 raw_stateProvince     State/Territory (unprocessed)                    fields\n13 stateConservation     State conservation                               fields\n14 raw_stateConservation State conservation (unprocessed)                 fields\n```\n\n\n:::\n\n```{.r .cell-code}\n# Download record counts by state/territory\nrecords <- galah_call() %>%\n  galah_group_by(cl22) %>%\n  atlas_counts()\n\n# Add state information back to data frame\nrecords$State <- factor(seq_len(nrow(records)), labels = records$cl22) \n\n# Plot\nggplot(records, aes(x = State, y = log10(count), fill = count)) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_viridis(option = \"magma\", begin = 0.10, end = 0.95) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nMy default for categorical color schemes is the 'dark2' palette from `RColorBrewer`;\nbut given the subject matter of our work, it's worth mentioning the wonderful \n`feather` package by [Shandiya Balasubramaniam](about/Balasubramaniam_Shandiya/index.html), \nwhich gives colors based on Australian bird plumage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(repo = \"shandiya/feathers\")\nlibrary(feathers)\n\nrcfd <- galah_call() %>%\n  galah_identify(\"Rose-crowned Fruit-Dove\") %>%\n  galah_group_by(cl22) %>%\n  atlas_counts()\n  \nrcfd$State <- factor(seq_len(nrow(rcfd)), labels = rcfd$cl22) \n\nggplot(rcfd, aes(x = State, y = log10(count), fill = State)) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_manual(values = get_pal(\"rose_crowned_fruit_dove\")) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nAll of this is fine, but what if you have a specific image that you want to take\ncolors from? A logical choice is to pick the colors you want using an image \neditting program, but if we want to try something automated, there are options\nin R as well.\n\n# Extracting colors\n\n[National Eucalypt Day](https://www.eucalyptaustralia.org.au/national-eucalypt-day/national-eucalypt-day/) aims to raise awareness about Eucalypts and celebrate their influence on the lives of Australians. In honour of National Eucalypt day, we wanted \nto created a plot based on occurrences data held in the Atlas of Living Australia, \nthemed using colours from actual Eucalypts.\n\nWe used this image from a tweet by Dean Nicolle:\n  \n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-lang=\"en\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"en\" dir=\"ltr\">Happy &#39;National Eucalypt Day&#39;!<br>The Western Australian gimlet (Eucalyptus salubris) has just been announced as Eucalypt of the Year for 2021. Renowned for its fluted, smooth, shiny, and colourful trunk &amp; branches. <a href=\"https://t.co/pOsufQtxWS\">pic.twitter.com/pOsufQtxWS</a></p>&mdash; Dean Nicolle (@DeanNicolle1) <a href=\"https://twitter.com/DeanNicolle1/status/1374112431782301698?ref_src=twsrc%5Etfw\">March 22, 2021</a></blockquote>\n\n```\n\n:::\n:::\n\n\n![Image of Eucalyptus salubris by Dean Nicolle](./data/Dean_Nicolle_Esalubris_image_small.jpeg)\n\nFirst, get observations of the Eucalypt of the Year 2021 from ALA using the [galah](https://atlasoflivingaustralia.github.io/galah/index.html) package. Specifically, we use `atlas_counts()` to determine how many records of *Eucalyptus salubris* are held by the ALA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_records <- galah_call() %>%\n  galah_identify(\"Eucalyptus salubris\") %>%\n  atlas_counts()\n```\n:::\n\n\nHere is what the data look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_records %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  count\n  <int>\n1   892\n```\n\n\n:::\n:::\n\n\n\nThen get a color scheme from images of the species in question using the [paletter](https://github.com/AndreaCirilloAC/paletter) package (which needs to be installed from GitHub) <br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\"AndreaCirilloAC/paletter\")\nlibrary(paletter)\n\nimage_pal <- create_palette(\n  image_path = \"./data/Dean_Nicolle_Esalubris_image_small.jpeg\",\n  type_of_variable = \"categorical\",\n  number_of_colors = 15)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNote that we downsized the image before running the `paletter` code, as large images\ntake much longer to process.\n\n# Creating a plot\n\nOnce we have this palette, the obvious question is what kind of plot to draw. We\ncould have done a map, but those can be a bit boring. We decided to try something\nthat represented the number of observations we had of this species at ALA, and \nincluded color, but was otherwise just a pretty picture that didn't need to contain\nany further information. Rather than have a traditional x and y axis, therefore,\nwe decided to try out the [igraph](https://igraph.org/r/) package to plot the points\nin an interesting way.\n\nFirst, we create a vector containing as many points as we want to display, and \ndistribute our colors among them as evenly as possible\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector to index colours\nrep_times <- floor(n_records / length(image_pal))\n\ncolour_index <- rep(seq_along(image_pal),\n  each = as.integer(rep_times))\n```\n:::\n\n\nThen we can create a network using `igraph`, and use it to create a layout for \nour points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n\ngraph_list <- lapply(c(1:15), function(a){\n  lookup <- which(colour_index == a)\n  return(\n    tibble(\n    from = lookup[c(1:(length(lookup)-1))],\n    to = lookup[c(2:length(lookup))])\n    )\n  })\ngraph_df <- as_tibble(do.call(rbind, graph_list)) %>%     # build matrix\n  tidyr::drop_na() %>%\n  as.matrix(.)\ncolour_graph <- graph_from_edgelist(graph_df)             # create network graph\n\n# convert to a set of point locations\ntest_layout <- as.data.frame(layout_nicely(colour_graph)) # convert to df\ncolnames(test_layout) <- c(\"x\", \"y\")                      # change colnames\ntest_layout$colour_index <- factor(colour_index)          # add colour_index col\n```\n:::\n\n\nFinally, we draw the plot with [ggplot2](https://ggplot2.tidyverse.org/), removing\naxes with `theme_void()`\n\n\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(test_layout, aes(x = x, y = y, colour = colour_index)) +\n  geom_point(size = 3, alpha = 0.9) +\n  scale_color_manual(values = image_pal) +\n  coord_fixed() +\n  theme_void() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=9in style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nThat's it! While I like the effect here, I think the `paletter` package is best\nsuited to cases where there are large areas of strongly contrasting colors;\nit's less ideal for images with subtle color differences. It also\ndoesn't appear to have been updated lately, which may mean it's not being supported\nany more. But I'm happy with this plot, and would definitely consider using it \nagain.\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2024-02-12\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n dplyr       * 1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n feathers    * 0.0.0.9000 2022-10-11 [1] Github (shandiya/feathers@4be766d)\n galah       * 2.0.1      2024-02-06 [1] CRAN (R 4.3.2)\n ggplot2     * 3.4.4      2023-10-12 [1] CRAN (R 4.3.1)\n htmltools   * 0.5.7      2023-11-03 [1] CRAN (R 4.3.2)\n igraph      * 1.5.1      2023-08-10 [1] CRAN (R 4.3.2)\n paletter    * 0.0.0.9000 2023-01-10 [1] Github (AndreaCirilloAC/paletter@c09605b)\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.3.2)\n viridis     * 0.6.4      2023-07-22 [1] CRAN (R 4.3.2)\n viridisLite * 0.4.2      2023-05-02 [1] CRAN (R 4.3.1)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.3.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/twitter-widget-0.0.1/widgets.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}