{
  "hash": "4b6a9e49318de673b13eb7180d28e14c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Convex and alpha hulls for conservation mapping\"\ndescription: |\n  Convex hulls and alpha hulls are wonderful alternatives for visualising species distributions \n  when a species has very few existing observations.\n  Here, we will show you how to create these spatial polygons using data\n  from the ALA.\nauthor:\n  - name: \"Margot Schneider\"\n  - name: \"Fonti Kar\"\ndate: \"2022-10-20\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 3\ncategories:\n  - Summaries\n  - Maps\n  - Eukaryota\n  - Animalia\n  - R\nimage: alpha-hull-fig.png\nfreeze: true\n---\n\n\n\n<!-- remove metadata section -->\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\n[Margot Schneider](https://labs.ala.org.au/about/Schneider_Margot/index.html)\n[Fonti Kar](https://labs.ala.org.au/about/Kar_Fonti/index.html) \n\n#### Date\n20 October 2022\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/margot.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/fonti.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nThe ability to predict where a species resides is important in conservation ecology, but when a species has very few existing observations (i.e. a *data-deficient species*), predicting its distribution can be difficult (or impossible) using standard methods for species distributions. \n\n**Convex hulls** and **alpha hulls** are two ways to plot the spatial distribution of data-deficient species, making it possible to calculate metrics that help us predict whether a species is threatened to become extinct (i.e. [IUCN metrics](https://link.springer.com/article/10.1007/s10531-019-01697-9)).\n\nRecently, [Dr. Marsh and colleagues](https://onlinelibrary.wiley.com/doi/full/10.1111/geb.13550) used alpha hulls to estimate the impact of the 2020 mega bushfires  on invertebrates in southern Australia. Since invertebrate data is inherently sparse, alpha hulls are really useful when you only have a handful of records to work with.  \n\nIn this post, we'll explain the difference between convex hulls and alpha hulls and show you how to make them yourself!\n\n\n## Download data\n\nTo illustrate the various spatial polygons you can make, let's look at an invertebrate species from Dr. Marsh's study: an endemic damselfly, *Austroargiolestes calcaris*, commonly known as the [Powdered Flatwing](https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/2d944503-2f03-48ec-8a8a-b78bc2b674af)\n\n:::{layout=\"[-1, 1, -1]\"}\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/a/9/2/f6f52563-3bb4-45f3-a5cd-26a3773329a5/original\"></img>\n:::\n::: {.figure-caption}\n[A Powdered Flatwing perched on a plant by Reiner Richter CC-BY 4.0](https://images.ala.org.au/image/f6f52563-3bb4-45f3-a5cd-26a3773329a5)\n:::\n\nFirst we will load the R packages we'll need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pacman\")\npacman::p_load(remotes, galah, tidyverse, alphahull, \n               sp, sf, ozmaps, patchwork)\n```\n:::\n\n\nNow let's use `galah` to download occurrence records from the [Atlas of Living Australia (ALA)](https://www.ala.org.au/). Note that you will need to first enter a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config` before fetching records.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add registered email (register at ala.org.au)\ngalah_config(email = \"your-email@email.com\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download Powdered flatwing records \ngalah_call() |> \n  galah_identify(\"Austroargiolestes calcaris\") |> \n  galah_filter(profile=\"ALA\") |> \n  galah_select(group = \"basic\") |> \n  atlas_occurrences() -> dfly\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrying in 1 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\n# See first 10 rows\ndfly |> head(10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   recordID       scientificName taxonConceptID decimalLatitude decimalLongitude\n   <chr>          <chr>          <chr>                    <dbl>            <dbl>\n 1 005e7dd7-884a… Austroargiole… https://biodi…           -36.7             147.\n 2 00c274f7-9fbc… Austroargiole… https://biodi…           -37.9             145.\n 3 00eb34ec-c46c… Austroargiole… https://biodi…           -37.9             145.\n 4 00fabc50-3016… Austroargiole… https://biodi…           -34.0             150.\n 5 012c74aa-0fd8… Austroargiole… https://biodi…           -37.5             147.\n 6 013c14be-3d69… Austroargiole… https://biodi…           -37.9             145.\n 7 0170fe4b-a054… Austroargiole… https://biodi…           -36.9             148.\n 8 017fc3d9-e8c2… Austroargiole… https://biodi…           -37.5             146.\n 9 0213326f-b3da… Austroargiole… https://biodi…           -37.7             146.\n10 02236ffc-4351… Austroargiole… https://biodi…           -37.7             146.\n# ℹ 3 more variables: eventDate <dttm>, occurrenceStatus <chr>,\n#   dataResourceName <chr>\n```\n\n\n:::\n:::\n\n\nBefore we can plot anything, we will also need to remove all duplicated values and any NA values!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicates & NAs\ndfly |> \n  filter(!duplicated(decimalLongitude) & !duplicated(decimalLatitude)) |> \n  filter(!is.na(decimalLongitude) & !is.na(decimalLatitude) ) -> dfly_clean\n```\n:::\n\n\n## Map a convex hull\n\nA **convex hull** is a way to draw around all the points of a species on a map with as few lines as possible. It's defined as the smallest polygon that _encloses all the points_ in the data set.\n\nTo plot a convex hull on a map, we can use `chull()` to compute a convex hull from our cleaned Powdered Flatwing data. `chull()` computes a series of points that make up our convex hull.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute convex hull\ndfly_clean |> \n  dplyr::select(decimalLongitude, decimalLatitude) |>  \n  chull() -> dfly_chull\n\ndfly_chull\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 284 245  98 405 383  84 221 264 105  87 552\n```\n\n\n:::\n:::\n\n\nNext, we join the first point of the hull vector to the last point, creating a closed outline which can be plotted on a map.  \n\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\n# Join first point of hull to the last point\ndfly_chull_pts <- c(dfly_chull, dfly_chull[1])\n```\n:::\n\n\nNow we can get a map of Australia from the `{ozmaps}` package and use `st_transform()` to make sure it has the correct projection of `4326`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get map of Australia\naus <- st_transform(ozmaps::ozmap_country, 4326)\n```\n:::\n\n\nAnd finally, we plot our Powdered Flatwing occurrence records and its convex hull on a map!  \n\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot occurrences and convex hull\nggplot() + \n  geom_sf(data = aus, \n          colour = \"black\", \n          fill = \"white\")  + \n  geom_point(data = dfly_clean, \n             mapping = aes(decimalLongitude, decimalLatitude), \n             colour = \"black\", size = 0.8) + \n  geom_polygon(data = dfly_clean[dfly_chull_pts, ], \n               mapping = aes(decimalLongitude, decimalLatitude), \n               fill = \"orange\", \n               colour = \"black\", \n               alpha = 0.5) + \n  coord_sf(xlim=c(142, 152), \n           ylim=c(-32,-44)) +\n  labs(title = \"Convex hull\", \n       x = \"Longtitude (DD)\", \n       y = \"Latitude (DD)\") + ## DD here stands for decimal degrees\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n\n## What is an alpha hull?\n\nLike a convex hull, an **alpha hull** is also a way to draw the smallest polygon that encloses all the points in a data set. However, alpha hulls differ because they use an **alpha parameter** to control how tightly the boundary fits around a set of points. This method creates concave, arched edges that fit around occurrence records more tightly. A tighter boundary around our points helps us avoid over-predicting the range of a species.\n\nTo illustrate, here are three alpha hulls with _increasing_ values for alpha. Notice as the alpha value increases, the tightness of our boundary decreases.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Compute alpha shapes and store in list column within a tibble\ntibble(\n  alpha_value = c(1, 2, 5),\n  ahull_ls = map(.x = c(1, 2, 5),\n                 .f = ~ dfly_clean |> \n                   select(decimalLongitude, decimalLatitude) |> \n                   ahull(alpha = .x)) \n) -> dfly_ahulls\n\n\n# Transform alpha hull to an `sp` object and set map projection to 4326\nset_map_proj <- function(sp_obj){\nsp_obj@proj4string <- sp::CRS(\"EPSG:4326\") \n\nsp_obj\n}\n\ndfly_ahulls |> \n  mutate(ahull_sp = map(.x = ahull_ls,\n                        .f = hull2spatial::ahull2poly),\n         ahull_sp = map(.x = ahull_sp,\n                        .f = set_map_proj)\n         ) -> dfly_ahulls\n\n\n# Transform `sp` object into a `sf` object \ndfly_ahulls |> \n  mutate(ahull_sf = map(.x = ahull_sp,\n                        .f = st_as_sf)\n         ) -> dfly_ahulls\n\n# Transform occurrences into `sf` object for plotting\nst_as_sf(dfly_clean, \n         coords = c(\"decimalLongitude\", \"decimalLatitude\"), \n         crs = 4326) -> dfly_sf\n\n## A function to compose map \nplot_ahull_fun <- function(ahull_sf, title = NULL){\n  p <- ggplot() + \n    geom_sf(data = aus, colour = \"black\", fill = \"white\")  +\n    geom_sf(data = dfly_sf, colour = \"black\", size = 0.5) +  \n    geom_sf(data = ahull_sf, fill = \"orange\", alpha = 0.5) +\n    coord_sf(xlim=c(142, 152),ylim=c(-32,-44)) +\n    ggtitle(paste(\"a = \", as.character(title))) +\n    labs(x = \"Longtitude (DD)\", y = \"Latitude (DD)\") + \n    theme_bw(base_size = 12)\n  \n  p\n}\n\ndfly_ahulls |> \n  mutate(ahull_maps = map2(.x = ahull_sf,\n                           .y = alpha_value,\n                           .f = ~ plot_ahull_fun(.x , .y)) \n  ) -> dfly_ahulls\n```\n:::\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=1152 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n**Alpha = 2** is the alpha value we've most commonly come across in research, and is the value recommended by the IUCN for various forms of species vulnerability analysis. \n\nSo, let's learn how to make the **a = 2** plot above!\n\n## Map an alpha hull\n\nTo make an alpha hull, we will rely on the `hull2spatial` package (developed by Cecina Babich Morrow). This package allows us to convert \"`ahull`\" objects into ggplot-friendly objects (to learn more, [check out their blog post about the package](https://babichmorrowc.github.io/post/2019-03-18-alpha-hull/)). \n\nInstall the package from GitHub using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"babichmorrowc/hull2spatial\")\nlibrary(hull2spatial)\n```\n:::\n\n\n\nTo compute our alpha hull, we'll provide the longitude and latitude coordinates of our data points to the `ahull()` function, and set `alpha = 2`. `ahull()` creates a `list` object with far more complexity than our convex hull. A nice way to understand the difference is to look at the first 5 rows of the `arcs` component of our list `dfly_ahull`, which stores information like the center and radius of each arch in our alpha hull.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute an alpha hull\ndfly_clean |> \n  dplyr::select(decimalLongitude, decimalLatitude) |> \n  ahull(alpha = 2) -> dfly_ahull\n\n# See first 5 values of `arcs` component of list\ndfly_ahull$arcs |> head(5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           c1        c2 r        v.x        v.y        theta end1 end2\n[1,] 143.7540 -36.13036 2  0.7915500 -0.6111044 8.326528e-02  221  264\n[2,] 145.2171 -35.22839 2  0.5608382 -0.8279254 4.870812e-01  264  524\n[3,] 146.5099 -34.22352 2  0.5731316 -0.8194633 3.713225e-01  524  203\n[4,] 148.1218 -33.33548 2  0.6121914 -0.7907096 6.333623e-01  203  105\n[5,] 151.0611 -32.16307 2 -0.5081885 -0.8612458 4.673462e-05  105   87\n```\n\n\n:::\n:::\n\n\nNext we'll transform our alpha hull and occurrence points into spatial objects for plotting. \n\nThe `ahull2poly()` function converts our alpha hull to one type of spatial object (an `sp` object), but we'll use `st_as_sf()` to convert our result to an `sf` object (because it's easier to plot) and set our map projection to `4326`. We'll do the same for our damselfly occurrence points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform  `ahull` into spatial object, convert to sf, set coordinates\nhull2spatial::ahull2poly(dfly_ahull) |> \n  st_as_sf() |> \n  st_set_crs(st_crs(aus)) -> dfly_sf_ahull\n\n# Convert occurrence points to `sf` for plotting\ndfly_clean |> \n  st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), \n           crs = 4326) -> dfly_sf\n```\n:::\n\n\nFinally, we can create our plot!\n\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot the occurrences and alpha hull\nggplot() + \n  geom_sf(data = aus, colour = \"black\", fill = \"white\")  +\n  geom_sf(data = dfly_sf, colour = \"black\", size = 0.5) +  \n  geom_sf(data = dfly_sf_ahull, fill = \"orange\", alpha = 0.5) +\n  coord_sf(xlim=c(142, 152),ylim=c(-32,-44)) +\n  ggtitle(\"Alpha hull\") +\n  labs(x = \"Longtitude (DD)\", y = \"Latitude (DD)\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n### Alpha hull with filtered observations\n\nCitizen science data are often excluded from scientific analyses due to poor data quality e.g. rare species can be misidentified by someone who's not an expert. Although a strict data criteria will reduce the number of data points, we can still compute and plot alpha hulls for the Powdered Flatwing - this is the beauty of them!\n\nLet's repeat exactly the same steps as above for generating an alpha hull, but only use a subset of our damselfly observations that comes from specimen data. We can do this by specifying the `basisOfRecord` with `galah_filter()`.\n\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\n# Create a vector excluding human observations\ninstitution_only <- c(\"PRESERVED_SPECIMEN\", \"LIVING_SPECIMEN\", \n                   \"MACHINE_OBSERVATION\", \"MATERIAL_SAMPLE\")\n\ngalah_call() |> \n  galah_identify(\"Austroargiolestes calcaris\") |> \n  galah_filter(basisOfRecord == institution_only,\n               profile = \"ALA\") |> \n  galah_select(group = \"basic\") |> \n   atlas_occurrences() -> dfly_specionly\n```\n:::\n\n\nBelow is our alpha hull of our specimen-only damselfly data. You'll notice that there are **two separate hulls** in this map! This is another benefit of using an alpha hull over a convex hull. The mathematical constraints of a convex hull mean all points must be contained within a single polygon - this can lead to an over-estimation of a species' range.\n\n\n\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n\n\n\n## A real-life example\n\nAlpha hulls, and their ability to generate multiple hulls when data is sparse, can help us understand how sensitive certain species are to environmental change over time, even when species have few existing observations. \n\nFor example, [Dr. Takach and their team](https://onlinelibrary.wiley.com/doi/10.1111/ddi.13145) wanted to investigate how the distribution of mammals in the tropical savanna like [*Mesembriomys gouldii* (the Black-Footed Tree Rat)](https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/f38bcd7e-ae6a-4734-bd64-06995bc230eb) shrink or expand in response to pressures like habitat loss and changing climate. Using alpha hulls, they found that the ecological niche of this species has shrunk due to a loss of suitable habitat over time.\n\n\n:::{layout=\"[-1, 1, -1]\"}\n![](images/species/black-rat-cropped.jfif){.clipped style=\"object-fit:cover;\"}\n:::\n::: {.figure-caption}\n[A Black-Footed Tree Rat perched on a branch by Colin Trainor CC-BY-NC 4.0](https://images.ala.org.au/image/a197988c-5da5-4260-8f2a-5bb55b468fce)\n:::\n\n\nThe published paper didn't provide a visual of this species' distribution, so we've made a map below with ALA data to show the change in distribution over time:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Download records\ngalah_call() |> \n  galah_identify(\"Mesembriomys gouldii\") |> \n  galah_filter(profile = \"ALA\") |> \n  galah_select(group = \"basic\") |> \n  atlas_occurrences() -> tree_rat\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrying in 1 seconds.\nRetrying in 2 seconds.\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Remove duplicates and NAs\ntree_rat |> \n  filter(! duplicated(decimalLongitude) & ! duplicated(decimalLatitude)) |> \n  filter(! is.na(decimalLongitude) & ! is.na(decimalLatitude) ) -> tree_ratclean\n\n# Convert occurrence points to sf for plotting\ntree_ratclean |> \n  st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), \n           crs = 4326) -> tree_rat_sf\n\n# Compute alpha hull\ntree_ratclean |> \n  select(decimalLongitude, decimalLatitude) |> \n  ahull(alpha = 2) -> tree_rat_ahull\n\n# Transform `ahull` to `sf`, set projection\nhull2spatial::ahull2poly(tree_rat_ahull) |> \n  st_as_sf() |>\n  st_set_crs(st_crs(aus)) -> tree_rat_sf_ahull\n\n# Convert occurrence points to sf for plotting\ntree_ratclean |> \n  st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), \n           crs = 4326) -> tree_rat_sf\n\n# Get map of Australia & set projection\naus <- st_transform(ozmaps::ozmap_country, 4326)\n\n#---\n\n# Download tree rat records after 2000\ngalah_call() |>\n  galah_identify(\"Mesembriomys gouldii\") |>\n  galah_filter(profile = \"ALA\",\n               year >= 2000,) |>\n  galah_select(group = \"basic\") |>\n  atlas_occurrences() -> Rtree_rat\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRetrying in 1 seconds.\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Remove duplicates & exclude NAs\nRtree_rat |> \n  filter(!duplicated(decimalLongitude) & !duplicated(decimalLatitude)) |> \n  filter(!is.na(decimalLongitude) & !is.na(decimalLatitude) ) -> Rtree_ratclean\n\n# Compute an alpha hull for our specimen only occurrences\nRtree_ratclean |> \n  select(decimalLongitude, decimalLatitude) |> \n  ahull(alpha = 2) -> Rtree_rat_ahull\n\n# Transform `ahull` to sf, set coordinates\nhull2spatial::ahull2poly(Rtree_rat_ahull) |> \n  st_as_sf() |> \n  st_set_crs(st_crs(aus)) -> Rtree_rat_sf_ahull\n\n# Transform occurrence points to sf for plotting \nRtree_ratclean |> \n  st_as_sf(coords = c(\"decimalLongitude\", \"decimalLatitude\"), \n           crs = 4326) -> Rtree_rat_sf\n\n#---\n\n# Nice title\nrat_title <- expression(italic(\"Mesembriomys gouldii \"), \"alpha hulls\")\n\n# Plot!\nggplot() + \n  geom_sf(data = aus, colour = \"black\", fill = \"white\")  +\n  geom_sf(data = tree_rat_sf_ahull, aes(fill = \"chartreuse3\") ,alpha = 0.5, colour = \"black\", position = \"identity\") +\n    geom_sf(data = Rtree_rat_sf_ahull, aes(fill = \"blueviolet\"), alpha = 0.5, colour = \"black\", position = \"identity\") +\n  scale_fill_identity(guide = \"legend\",\n                      name = \"Record date ranges\",\n                      labels = c('2000 Onwards', 'All Records')) +\n  guides(colour = guide_legend(override.aes = list(alpha = 0.1))) +\n  coord_sf(xlim=c(125, 145),ylim=c(-20,-10)) +\n  ggtitle(rat_title) +\n  labs(x = \"Longtitude (DD)\", y = \"Latitude (DD)\") + \n  theme_bw() +\n  theme(legend.position = \"bottom\") -> combinedtree_rat_ahull_p\n```\n:::\n\n\n</details>\n\n\n::: {.cell .column-page layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=1344 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n## Final thoughts\n\nWhile sophisticated tools for modelling species distribution exist, they require a lot of data to make reliable estimates. **Convex polygons** and **alpha hulls** are flexible alternatives that can help us understand dynamic changes to distributions of understudied or vulnerable data-deficient species.\n\n\n::: {.callout-note icon=false}\n\n\n## Acknowledgement:\n\nThe work in this post is part of project titled: Curated biodiversity data for rapid assessment of bushfire impact. This project is funded by the [Australian Research Data Commons (ARDC) bushfire data challenges program](https://ardc.edu.au/program/bushfire-data-challenges/).\n\n:::\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2024-02-12\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version date (UTC) lib source\n alphahull     * 2.5     2022-06-16 [1] CRAN (R 4.3.2)\n dplyr         * 1.1.4   2023-11-17 [1] CRAN (R 4.3.2)\n forcats       * 1.0.0   2023-01-29 [1] CRAN (R 4.3.2)\n galah         * 2.0.1   2024-02-06 [1] CRAN (R 4.3.2)\n ggplot2       * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n htmltools     * 0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n hull2spatial  * 0.1.0   2022-10-12 [1] Github (babichmorrowc/hull2spatial@921594f)\n lubridate     * 1.9.3   2023-09-27 [1] CRAN (R 4.3.2)\n ozmaps        * 0.4.5   2021-08-03 [1] CRAN (R 4.3.2)\n pacman        * 0.5.1   2019-03-11 [1] CRAN (R 4.3.2)\n patchwork     * 1.1.3   2023-08-14 [1] CRAN (R 4.3.1)\n purrr         * 1.0.2   2023-08-10 [1] CRAN (R 4.3.2)\n readr         * 2.1.4   2023-02-10 [1] CRAN (R 4.3.2)\n remotes       * 2.4.2.1 2023-07-18 [1] CRAN (R 4.3.2)\n sessioninfo   * 1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf            * 1.0-14  2023-07-11 [1] CRAN (R 4.3.2)\n sp            * 2.1-2   2023-11-26 [1] CRAN (R 4.3.2)\n stringr       * 1.5.1   2023-11-14 [1] CRAN (R 4.3.2)\n tibble        * 3.2.1   2023-03-20 [1] CRAN (R 4.3.2)\n tidyr         * 1.3.0   2023-01-24 [1] CRAN (R 4.3.2)\n tidyverse     * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n xaringanExtra * 0.7.0   2022-07-16 [1] CRAN (R 4.3.2)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.3.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}