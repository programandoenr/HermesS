{
  "hash": "feeac29edd4512b1b1cadb2385651cc5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quantifying species range and overlap with fire-burned areas using concave hulls\"\ndescription: |\n  Calculating range overlap is an efficient way to estimate the impact of natural disasters on biodiversity. Here we'll use curated datasets to compute concave hulls to visualise the spatial distribution of *Apidae* (Bees) and *Daviesia* (Bitterpeas) and their overlap with burned areas of the Black Summer fires of 2019-2020. \nauthor:\n  - name: \"Fonti Kar\"\n  - name: \"Margot Schneider\"\ndate: \"2023-04-11\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 2\ncategories:\n  - Eukaryota\n  - Animalia\n  - Plantae\n  - Summaries\n  - Maps\n  - R\nimage: images/bee_fire.png\nfreeze: true\neditor_options: \n  chunk_output_type: console\nexecute: \n  eval: true\n  warning: false\n  message: false\n  fig-align: center\n---\n\n\n\n\n<!-- remove metadata section -->\n\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n<!-- Author card -->\n\n::: author-card\n::: author-card-text\n#### Author\n\n[Fonti Kar](https://labs.ala.org.au/about/Kar_Fonti/index.html)\\\n[Margot Schneider](https://labs.ala.org.au/about/Schneider_Margot/index.html)\n\n#### Date\n\n11 April 2023\n:::\n\n::: author-card-image\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/fonti.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n::: author-card-image\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/margot.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nThe 2019/2020 Australian bushfires had a devastating impact on the natural landscape, threatening our native biodiversity. More than ever, decision makers need curated, open access biodiversity data to help respond effectively to future bushfires.\n\nOur team at the Atlas of Living Australia (ALA) has been working with [Invertebrates Australia](https://invertebratesaustralia.org/) and [CSIRO National Research Collections](https://www.csiro.au/en/about/facilities-collections/collections) team to collate biodiversity datasets that can be used for off-the-shelf bushfire assessments. The two datasets contain data on Australian taxonomic groups that are often overlooked and severely affected during bushfires: **invertebrates** ([insects](https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/17c9fd64-3c07-4df5-a33d-eda1e065e99f), [molluscs](https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/4fb59020-e4a8-4973-adca-a4f662c4645c), [spiders](https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/00a0a9ea-1ff1-4da7-8a52-1568791c5b1e)) and [**vascular plants**](https://bie.ala.org.au/species/NZOR-6-33408).\n\n\n:::{.announce style=\"background-color: #FFEAC2; text-align: center; margin-top: 15px; margin-bottom: 20px;\"}\n##### We are thrilled to announce that these datasets are available from [CSIRO's data access portal](https://data.csiro.au/collection/csiro:56679)!\n:::\n\nThis post expands on our [last post about using convex and alpha hulls to visualise distributions of data-deficient species](https://labs.ala.org.au/posts/2022-10-12_alpha-hulls/post.html).\n\nHere, we show you how to compute a new form of spatial polygon --- a [*concave hull*](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.676.6258&rep=rep1&type=pdf) --- and use it to represent a species' range and to calculate the overlap with fire-burned areas (range overlap). Unlike convex hulls, concave hulls have the added flexibility to adjust their tightness to the data (or *concavity*). This flexibility allows more accurate estimation of species ranges, making it a useful approach to rapidly assess how natural disasters like bush fires affected biodiversity.\n\n\n# Download data\n\nFirst we will load the R packages we need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pacman\")\npacman::p_load(tidyverse, here, rmapshaper, sf, ggpointdensity, viridis, ozmaps, concaveman, cowplot, patchwork)\n```\n:::\n\n\nNext, we will go to the [Data Access Portal](https://data.csiro.au/collection/csiro:56679) to download the invertebrate and vascular plant datasets.\n\nClick on the **Files** tab (under the main title), then the **Download** button (in the top right corner), and select **Download all files as Zip archive**. Save this zip file in a local folder inside your current [R project](https://r4ds.had.co.nz/workflow-projects.html) and be sure to unzip it.\n\nNow we can read the curated datasets into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Invertebrates data\ninverts <- read_csv(here(\"your_directory_name\", \"invertebrate.data.03.2023.csv\"))\n\n# Vascular plants data\nvplants <- read_csv(here(\"your_directory_name\", \"vascularplant.data.03.2023.csv\"))  |> \n  rename(latitude = latitude_used, # Rename coordinate variables for consistency\n         longitude = longitude_used)\n```\n:::\n\n\n\n\n\n# Overview of data\n\nBoth datasets are based on studies that investigated the impact of the Black Summer bushfires and are designed to support future modelling and impact assessments. The [invertebrate dataset](https://doi.org/10.1111/geb.13550) spans across Australia, whereas the [vascular plant dataset](https://doi.org/10.1038/s41467-021-21266-5) is restricted to South-Eastern Australia and contains only species where more than 50% of their range was affected by the 2019/2020 fires.\n\n<br> **Summary of Invertebrate and Vascular Plant Data**\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"zscublebis\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#zscublebis table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#zscublebis thead, #zscublebis tbody, #zscublebis tfoot, #zscublebis tr, #zscublebis td, #zscublebis th {\n  border-style: none;\n}\n\n#zscublebis p {\n  margin: 0;\n  padding: 0;\n}\n\n#zscublebis .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: 90%;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#zscublebis .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#zscublebis .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#zscublebis .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#zscublebis .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zscublebis .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zscublebis .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zscublebis .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#zscublebis .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#zscublebis .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#zscublebis .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#zscublebis .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#zscublebis .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#zscublebis .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#zscublebis .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#zscublebis .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#zscublebis .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#zscublebis .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#zscublebis .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zscublebis .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#zscublebis .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#zscublebis .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#zscublebis .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zscublebis .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#zscublebis .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#zscublebis .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zscublebis .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zscublebis .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#zscublebis .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zscublebis .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#zscublebis .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zscublebis .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zscublebis .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zscublebis .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zscublebis .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zscublebis .gt_left {\n  text-align: left;\n}\n\n#zscublebis .gt_center {\n  text-align: center;\n}\n\n#zscublebis .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#zscublebis .gt_font_normal {\n  font-weight: normal;\n}\n\n#zscublebis .gt_font_bold {\n  font-weight: bold;\n}\n\n#zscublebis .gt_font_italic {\n  font-style: italic;\n}\n\n#zscublebis .gt_super {\n  font-size: 65%;\n}\n\n#zscublebis .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#zscublebis .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#zscublebis .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#zscublebis .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#zscublebis .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#zscublebis .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#zscublebis .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Taxonomic Group&lt;/strong&gt;\"><strong>Taxonomic Group</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Classes&lt;/strong&gt;\"><strong>Classes</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Families&lt;/strong&gt;\"><strong>Families</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Species&lt;/strong&gt;\"><strong>Species</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Records&lt;/strong&gt;\"><strong>Records</strong></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"taxon\" class=\"gt_row gt_left\">Invertebrates</td>\n<td headers=\"class\" class=\"gt_row gt_right\">46</td>\n<td headers=\"family\" class=\"gt_row gt_right\">2,044</td>\n<td headers=\"species\" class=\"gt_row gt_right\">44,146</td>\n<td headers=\"records\" class=\"gt_row gt_right\">300,987</td></tr>\n    <tr><td headers=\"taxon\" class=\"gt_row gt_left\">Vascular Plants</td>\n<td headers=\"class\" class=\"gt_row gt_right\">7</td>\n<td headers=\"family\" class=\"gt_row gt_right\">76</td>\n<td headers=\"species\" class=\"gt_row gt_right\">896</td>\n<td headers=\"records\" class=\"gt_row gt_right\">41,572</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nA total of 44,146 invertebrate species and 896 species of vascular plants are represented in these datasets. Below, we've attempted to show the geographic range of these data. So much data makes it challenging to visualise all data points and concave hulls at once. As such, we created the concave hull maps (left) below by randomly selecting one invertebrate species from each *class* and one plant species from each *family*.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Identify species that have more than 4 observations \nmore_than_4_obs <- inverts |> \n  group_by(scientific_name) |> \n  summarise(n_obs = n()) |> \n  filter(n_obs > 4) |> \n  pull(scientific_name)\n\n# Subset species with more than 4 observations and appear on mainland Australia + Tasmania\ninverts_subset <- inverts |>\n  filter(scientific_name %in% more_than_4_obs) |> \n  filter(latitude < -10, latitude >= -45,\n         longitude >= 113, longitude <= 155) |> \n  select(scientific_name:family, longitude, latitude)\n\n# Nest occurrence data\ninverts_nest <- inverts_subset |> \n  nest(coords = c(longitude, latitude))\n\n# Subset a random species from each class \nset.seed(123)  # Set seed so we all get the same results\nsubset <- inverts_nest |> \n  group_by(class) |> \n  slice_sample(n = 1) \n\n# Convert coordinates into sf object and compute concave hulls as list columns.\nsubset_concave <- subset |>\n    mutate(points_sf = map(.x = coords,\n                           ~ st_as_sf(.x, coords = c(\"longitude\", \"latitude\"),\n                                      crs = 4326)), \n           concave_sf = map(points_sf,\n                            ~ concaveman(.x)))\n\n# Unnest the concave hull list column\nsubset_concave <- subset_concave |> \n  select(scientific_name:family, concave_sf) |> \n  unnest(cols = c(concave_sf)) |> \n  ungroup() |> \n  st_sf(crs = 4326) \n\n# Retrieve Australia polygon\naus <- st_transform(ozmap_country, 4326)\n\n# Plotting spatial distributions\ninverts_concave <- ggplot() + \n  geom_sf(data = aus, colour = \"black\", fill = NA) +\n  geom_sf(data = subset_concave, fill = \"#609966\", alpha = 0.2, lwd = 0) +\n  coord_sf(xlim = c(110, 155)) +\n  theme_void() \n\n# Create plot showing overlapping points\ninverts_points_map <- ggplot() +\n  geom_pointdensity(data = inverts_subset,\n                    mapping = aes(x = longitude,\n                                  y = latitude)) +\n  geom_sf(data = aus, colour = \"white\", fill = NA) +  \n  scale_color_viridis(option = \"E\", begin = 0.1) +\n  coord_sf(xlim = c(110, 155)) +\n  guides(alpha = \"none\",\n         colour = guide_colorbar(title = \"Number of \\noverlapping points\")) +\n  theme_void() +\n  theme(legend.position = \"bottom\",\n        legend.margin = margin(0, 0, 0, 0),\n        legend.box.margin = margin(0, 0, 0, 0),\n        legend.justification = \"left\"\n        )\n\ninverts_concave + inverts_points_map + plot_annotation(title = \"Invertebrate Dataset\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Identify species that have more than 4 observations \nmore_than_4_obs_plants <- vplants |> \n  group_by(scientific_name) |> \n  summarise(n_obs = n()) |> \n  filter(n_obs > 4) |> \n  pull(scientific_name)\n\n# Subset species with more than 4 observations and appear on mainland Australia + Tasmaina\nvplant_subset <- vplants |>\n  filter(scientific_name %in% more_than_4_obs_plants) |> \n  filter(latitude < -10, latitude >= -45,\n         longitude >= 113, longitude <= 155) |> \n  select(species, class:genus, longitude, latitude) \n\n# Nest occurrence data\nvplant_nest <- vplant_subset |> \n   nest(coords = c(longitude, latitude))\n\n# Subset a random species from each family \nset.seed(123)  # Set seed so we all get the same results\nplant_subset <- vplant_nest |> \n  group_by(family) |> \n  slice_sample(n = 1) \n\n# Compute concave hulls\npl_subset_concave <- plant_subset |>\n    mutate(points_sf = map(.x = coords,\n                           ~ st_as_sf(.x, coords = c(\"longitude\", \"latitude\"),\n                                      crs = 4326)), \n           concave_sf = map(points_sf,\n                            ~ concaveman(.x)))\n\n# Unnest the data\npl_subset_concave <- pl_subset_concave |> \n  select(species:family, concave_sf) |> \n  unnest(cols = c(concave_sf)) |> \n  st_as_sf(crs = 4326) \n\n# Plotting spatial distributions\nplant_concave <- ggplot() + \n  geom_sf(data = aus, colour = \"black\", fill = NA) +\n  geom_sf(data = pl_subset_concave, fill = \"#609966\", colour = NA, alpha = 0.15, lwd = 0) + \n  coord_sf(xlim = c(140, 158),\n           ylim = c(-23, -43)) +\n  theme_void()\n\n# Create plot showing overlapping points\nplants_points_map <- ggplot() +\n  geom_pointdensity(data = vplant_subset,\n                    mapping = aes(x = longitude,\n                                  y = latitude)) +\n  geom_sf(data = aus, colour = \"black\", fill = NA) +  \n  scale_color_viridis(option = \"E\", begin = 0.1) +\n  coord_sf(xlim = c(140, 158),\n           ylim = c(-23, -43)) +\n  guides(alpha = \"none\",\n         colour = guide_colorbar(title = \"Number of \\noverlapping points\")) +\n  theme_void() +\n  theme(legend.position = \"bottom\",\n        legend.margin = margin(0, 0, 0, 0),\n        legend.box.margin = margin(0, 0, 0, 0),\n        legend.justification = \"left\"\n        )\n  \nplant_concave + plants_points_map + plot_annotation(title = \"Vascular Plant Dataset\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Pre-cleaning\n\nLet's use these datasets to calculate concave hulls and range overlaps with burned regions. One benefit of using these curated datasets is that *they do not contain any duplicates or missing values*. This makes data cleaning an easier job! \n\nHowever, there are still a few steps we need to do before computing concave hulls:\n\n### Remove data-deficient species\n\nFirst, we need to filter out any *data-deficient species* with fewer than 4 data points because concave hulls are best estimated with at least 4 data points. To do this, we'll calculate the number of observations for each species, then identify which ones have more than 4 records. Using this list of species, we can extract their data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmore_than_4_obs <- inverts |> \n  group_by(scientific_name) |> \n  summarise(n_obs = n()) |> \n  filter(n_obs > 4) |> \n  pull(scientific_name)\n\nmore_than_4_obs |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Aaaaba fossicollis\"    \"Aaaaba nodosus\"        \"Aades cultratus\"      \n[4] \"Aades griseatus\"       \"Aaroniella rawlingsi\"  \"Abantiades latipennis\"\n```\n\n\n:::\n\n```{.r .cell-code}\ninverts_subset <- inverts |>\n  filter(scientific_name %in% more_than_4_obs)\n```\n:::\n\n\n### Restrict data to mainland Australia and Tasmania\n\nThe invertebrate dataset includes records on offshore islands which can drastically skew the shape of a species' concave hull. For the purpose of this post, we will filter these out and only use records that occur on mainland Australia and Tasmania.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_mainland <- inverts_subset |> \n  filter(latitude < -10, latitude >= -45,\n         longitude >= 113, longitude <= 155) |> \n  select(scientific_name:family, longitude, latitude)\n```\n:::\n\n\n### List columns and nesting occurrence data\n\nFor the majority of calculations in this post, we will be making use of [**list columns**](https://jennybc.github.io/purrr-tutorial/ls13_list-columns.html), a very useful data structure for iterative analyses. You can think of a list column as mini data frames nested within a column by a grouping variable.\n\nIn this case we are nesting the coordinate data by species, which will make operations at the species level more efficient.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninverts_nest <- subset_mainland |> \n  nest(coords = c(longitude, latitude))\n\ninverts_nest |> \n  print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16,347 × 4\n  scientific_name       class   family        coords           \n  <chr>                 <chr>   <chr>         <list>           \n1 Aaaaba fossicollis    Insecta Buprestidae   <tibble [12 × 2]>\n2 Aaaaba nodosus        Insecta Buprestidae   <tibble [16 × 2]>\n3 Aades cultratus       Insecta Curculionidae <tibble [20 × 2]>\n4 Aades griseatus       Insecta Curculionidae <tibble [5 × 2]> \n5 Aaroniella rawlingsi  Insecta Philotarsidae <tibble [35 × 2]>\n6 Abantiades latipennis Insecta Hepialidae    <tibble [10 × 2]>\n# ℹ 16,341 more rows\n```\n\n\n:::\n:::\n\n\nYou can inspect elements in the list column like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninverts_nest |> \n  pluck(\"coords\", 1) |>  # 1 refers to the first element of the list column\n  print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n  longitude latitude\n      <dbl>    <dbl>\n1      153.    -28.4\n2      151.    -33.8\n3      153.    -31.0\n4      146.    -37.8\n5      153.    -30.3\n6      151.    -33.8\n# ℹ 6 more rows\n```\n\n\n:::\n:::\n\n\nThe biggest change with working with list columns is that you have to iterate across each element. To do this, we will use various functions from the `{purrr}` package for the next calculation steps.\n\n\n# Species range overlap with fire-burned areas\n\n### Get fire layer\n\nShapefiles for the 2019-2020 fire season are available through the [National Indicative Aggregated Fire Extent Dataset](https://www.environment.gov.au/fed/catalog/search/resource/details.page?uuid=%7B9ACDCB09-0364-4FE8-9459-2A56C792C743%7D) from the Department of Climate Change, Energy, the Environment and Water. \n\nClick on **Download Data** (near the top of the page), then click on **NIAFED_v20200623.zip** to download the zip file. Save the zip file in your project folder and unzip to retrieve the shapefiles.\n\nNow we can read the shapefile into R and set the projection to EPSG:4326. To speed up the computation of concave hulls and overlaps, we will remove elevation values and simplify the edges of the fire `POLYGON`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire <- st_read(here(\"your_directory_name\", \"NIAFED_20190701_20200622_v20200623.shp\")) |> \n  st_transform(crs = 4326) |> \n  st_zm() |>  # Remove Z or M values\n  ms_simplify() # Simplify edges of the fire layer\n```\n:::\n\n\n\n\n### Choose taxonomic group\n\nWhile it is possible to calculate range overlap with burned areas for all species in the dataset, it can take a lot of memory and processing time. Instead, we will demonstrate our workflow with --- **the bee family (Apidae)** --- as a working example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter invertebrate data to Apidae\nbees <- inverts_nest |> \n  filter(family == \"Apidae\") \n```\n:::\n\n\n### Compute concave hull\n\nIn the next steps, we will work through the coordinate data for each species iteratively using `map`.\n\nWe will transform each species' coordinates into an `sf` object using `st_as_sf()`, then compute the concave hulls with the `concaveman()` function. You can adjust the tightness of the hull boundary around a set of points using the `concavity` argument - the smaller the value, the tighter the hull. We've wrapped `mutate()` around these steps so the output will become variables in our `tibble`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbees_concave <- bees |>\n    mutate(points_sf = map(.x = coords,\n                           ~ st_as_sf(.x, coords = c(\"longitude\", \"latitude\"), # Set as sf object\n                                      crs = 4326) |> \n                             rename(points = geometry)), # Rename geometry variable to something intuitive\n           concave_sf = map(points_sf,\n                            ~ concaveman(.x, concavity = 2) |> # Compute concave hulls\n                              rename(concave = polygons)) # Rename geometry variable to something intuitive\n           ) \n\nbees_concave |> print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 × 6\n  scientific_name                   class   family coords   points_sf concave_sf\n  <chr>                             <chr>   <chr>  <list>   <list>    <list>    \n1 Amegilla (Asaropoda) bombiformis  Insecta Apidae <tibble> <sf>      <sf>      \n2 Amegilla (Asaropoda) calva        Insecta Apidae <tibble> <sf>      <sf>      \n3 Amegilla (Asaropoda) dawsoni      Insecta Apidae <tibble> <sf>      <sf>      \n4 Amegilla (Asaropoda) paracalva    Insecta Apidae <tibble> <sf>      <sf>      \n5 Amegilla (Asaropoda) rhodoscymna  Insecta Apidae <tibble> <sf>      <sf>      \n6 Amegilla (Notomegilla) aeruginosa Insecta Apidae <tibble> <sf>      <sf>      \n# ℹ 48 more rows\n```\n\n\n:::\n:::\n\n\n### Compute range overlap and descriptive statistics\n\nTo compute range overlaps, we need to set our geometry calculations to assume the Earth is flat and not spherical by setting `sf_use_s2(FALSE)`. This may be a limitation of the method but it still gives us a good approximation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Disable spherical geometry\nsf_use_s2(FALSE) \n```\n:::\n\n\nUsing `st_intersection()`, we can identify the overlap between each species' concave hull with fire-burned areas. We can then use `st_area()` to calculate the area (m^2^) of overlap and convert it into a percentage of each species' original range so that all species are comparable.\n\nUsing `possibly()` with our `map()` functions allows the calculations to return `NA` for species that did not overlap with burned areas. Once calculations are complete, we will un-nest the variables: `overlap_area` and `percent_overlap`, so they appear as regular columns in our `tibble`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate range overlap\nbees_overlap <- bees_concave |>\n  mutate(\n    overlap_sf = map(concave_sf,\n                     possibly(~ st_intersection(fire, .x) |> select(-Id) |> rename(overlap = geometry))), # Identify overlap\n    overlap_area = map(overlap_sf,\n                       possibly( ~ st_area(.x))), # Calculate area\n    percent_overlap = map2(.x = overlap_area,\n                           .y = concave_sf,\n                           possibly( ~ (.x / st_area(.y)) * 100))) |> # Calculate percentage\n  unnest(cols = c(overlap_area, percent_overlap)) # Unnest the area and percentage columns\n    \nbees_overlap |> print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 23 × 9\n  scientific_name          class family coords   points_sf concave_sf overlap_sf\n  <chr>                    <chr> <chr>  <list>   <list>    <list>     <list>    \n1 Amegilla (Asaropoda) bo… Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n2 Amegilla (Asaropoda) da… Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n3 Amegilla (Asaropoda) pa… Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n4 Amegilla (Zonamegilla) … Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n5 Austroplebeia cassiae    Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n6 Braunsapis clarissima    Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n# ℹ 17 more rows\n# ℹ 2 more variables: overlap_area [m^2], percent_overlap [1]\n```\n\n\n:::\n:::\n\n\n### Rank species by fire impact\n\nNext, we will take the top 3 species with the highest percentage range overlap with fire-burned areas (`percent_overlap`) for our data visualisation. The top 3 species include a stingless bee, a reed bee, and a carpenter bee.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop3 <- bees_overlap |> \n  slice_max(order_by = percent_overlap,\n            n = 3) \n\ntop3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 9\n  scientific_name          class family coords   points_sf concave_sf overlap_sf\n  <chr>                    <chr> <chr>  <list>   <list>    <list>     <list>    \n1 Austroplebeia cassiae    Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n2 Exoneura (Exoneura) hac… Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n3 Xylocopa (Koptortosoma)… Inse… Apidae <tibble> <sf>      <sf>       <sf>      \n# ℹ 2 more variables: overlap_area [m^2], percent_overlap [1]\n```\n\n\n:::\n:::\n\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/a/6/8/0/30410bf3-d717-45c4-bdb7-8cde5c6b086a/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/e/6/3/7/a0e69e32-1d1a-4598-b113-8c42ee76736e/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/e/9/5/24035fb7-0548-44b6-b933-3bcd58c959e5/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Austroplebeia* (Geoffbyrne CC-BY-NC 4.0)](https://images.ala.org.au/image/viewer?imageId=30410bf3-d717-45c4-bdb7-8cde5c6b086a), Middle: [*Exoneura* (Campbell Matt CC BY-NC 4.0)](https://images.ala.org.au/image/viewer?imageId=a0e69e32-1d1a-4598-b113-8c42ee76736e), Right: [*Xylocopa (koptortosoma) aruana* (zig madycki CC BY 3.0)](https://images.ala.org.au/image/viewer?imageId=24035fb7-0548-44b6-b933-3bcd58c959e5)\n:::\n\n# Make map\n\nWe will now select the variables we need and un-nest the relevant ones (`points_sf`, `concave_sf`, `overlap_sf`) for plotting - this gives us everything we need to create our maps!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbee_map_data <- top3 |> \n  select(scientific_name, points_sf, concave_sf, overlap_sf) |> \n  unnest(cols = c(points_sf, concave_sf, overlap_sf)) \n\nbee_map_data |> print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 4\n  scientific_name                points                                  concave\n  <chr>                     <POINT [°]>                            <POLYGON [°]>\n1 Austroplebeia cassiae (143.45 -14.08) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n2 Austroplebeia cassiae (143.27 -14.08) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n3 Austroplebeia cassiae  (143.32 -14.1) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n4 Austroplebeia cassiae (145.13 -15.67) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n5 Austroplebeia cassiae (143.28 -14.05) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n6 Austroplebeia cassiae (142.92 -13.42) ((143.27 -14.08, 143.28 -14.05, 142.92 …\n# ℹ 25 more rows\n# ℹ 1 more variable: overlap <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n\n### Create the base map\n\nLet's create our base map with the outline of Australia and the fire-burned area. You can see a majority of burnt areas are located in Northern Australia and the South-East coast.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve Australia polygon\naus <- st_transform(ozmap_country, 4326)\n\nbase_map <- ggplot() + \n  geom_sf(data = aus, colour = \"black\", fill = \"white\") +\n  geom_sf(data = fire, fill = \"#FEC3A6\", colour = \"#FEC3A6\") + \n  theme_void()\n```\n:::\n\n\n<aside>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n</aside>\n\n### Add species range overlap\n\nNow we can add the range overlap of our three bee species. We use `geometry` within `aes` to specify which variable from `bee_map_data` we want to plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_map <- base_map + \n  geom_sf(data = bee_map_data, \n          aes(geometry = concave, \n              colour = scientific_name, \n              fill = scientific_name), \n          size = 1.5, alpha = 0.1) + \n  geom_sf(data = bee_map_data, \n          aes(geometry = overlap), \n          colour = \"#FF925C\", fill = \"#FF925C\") + # To highlight area of overlap \n  geom_sf(data = bee_map_data, \n          aes(geometry = points, \n              colour = scientific_name), \n          size = 1) + \n  scale_colour_manual(values = c(\"#023E50\", \"#7B8A6A\", \"#3C908E\")) + \n  scale_fill_manual(values = c(\"#023E50\", \"#7B8A6A\", \"#3C908E\")) + \n  guides(colour = guide_legend(override.aes = list(alpha = 1))) + \n  coord_sf(xlim = c(128, 158)) +\n  theme(legend.title= element_blank(),\n        legend.position = \"bottom\") \n```\n:::\n\n\n<aside>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n</aside>\n\n### Create inset map\n\nThe navy blue hull in the top right corner of Australia is very small (*Austroplebeia cassiae*), so we will make an enlarged inset map so we can see it clearer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninset <- main_map + \n   coord_sf(\n    xlim = c(142.8 , 145.3),\n    ylim = c(-15.9, -13.25),\n    expand = FALSE\n            ) + \n   theme_void() +\n   theme(legend.position = \"none\",\n         panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.2))\n```\n:::\n\n\n<aside>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n</aside>\n\nWe'll also draw a box around the area of interest in the enlarged map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_bbox <- main_map + \n   geom_rect(aes(xmin = 142.8, xmax = 145.3,\n             ymin = -15.9, ymax = -13.25),\n             colour = \"black\",\n             fill = NA, \n             lwd = 0.2) \n```\n:::\n\n\n<aside>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n</aside>\n\n### Arrange map components\n\nFinally, we can arrange our base map and inset together for our final map! \n\nThis map shows the three bee species with the highest percentage overlap with fire-burned areas. Two of these bee species are located in Northern Australia and one is located in South-Eastern Australia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_map <- ggdraw(main_bbox) +\n  draw_plot(inset, \n            x = 0.52, y = 0.63, \n            width =0.45, height = 0.3)\n\ncombined_map\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n# Bonus: Vascular plants \n\nWe repeated the same workflow with the vascular plant dataset and created a map of range overlap with burned areas for **the genus *Daviesia*.**\n\nCommonly known as bitterpeas, *Daviesia* comprises plants pollinated by [reed bees (*Exoneura*)](https://fennerschool.anu.edu.au/files/Rubus%20berry%20pollinator%20infosheet.pdf), which are featured in the bee map above.\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/7/7/0/b/0a95413d-25aa-4889-9c7d-39dd898eb077/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/d/c/7/a/d8c159a6-1aa6-45f7-9f3d-b60da4eaa7cd/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/d/e/f/f/a5ad9e21-5ce5-450b-baf7-d52ea3a6ffed/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Daviesa buxifolia* (Betty and Don Wood CC BY 3.0)](https://images.ala.org.au/image/viewer?imageId=0a95413d-25aa-4889-9c7d-39dd898eb077), Middle: [*Daviesa nova-anglica* (Janeteveh CC BY-NC 4.0))](https://images.ala.org.au/image/viewer?imageId=d8c159a6-1aa6-45f7-9f3d-b60da4eaa7cd), Right: [*Daviesa suaveolens* (Crisp, M.D. CC BY 3.0))](https://images.ala.org.au/image/viewer?imageId=a5ad9e21-5ce5-450b-baf7-d52ea3a6ffed)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Extract candidate genus\ndaviesia <- vplant_nest |> \n  filter(genus == \"Daviesia\")\n\n# Compute concave hulls\ndaviesia_concave <- daviesia |>\n    mutate(points_sf = map(.x = coords,\n                           ~ st_as_sf(.x, coords = c(\"longitude\", \"latitude\"),\n                                      crs = 4326)), \n           concave_sf = map(points_sf,\n                            ~ concaveman(.x)))\n\n# Compute range overlap and descriptive statistics and select \ndaviesia_overlap <- daviesia_concave |> \n  mutate(overlap_sf = map(concave_sf, \n                          possibly(~ st_intersection(fire, .x) |> select(-Id))),\n  overlap_area = map(overlap_sf,\n                     possibly(~ st_area(.x))),\n  percent_overlap = map2(.x = overlap_area,\n                         .y = concave_sf,\n                         possibly(~ (.x / st_area(.y))*100))) |> \n  unnest(cols = c(overlap_area, percent_overlap)) \n\n## Prepare for plotting and rename variables\ndaviesia_map_data <- daviesia_overlap |> \n  select(species, overlap_area, percent_overlap, points_sf, concave_sf, overlap_sf) |> \n  unnest() |> \n  rename(points = geometry, \n         concave = polygons, \n         overlap = geometry1) \n\n## Create main map reusing base_map from above\ndaviesia_main_map <- base_map + \n    geom_sf(data = daviesia_map_data, \n          aes(geometry = concave, \n              colour = species, \n              fill = species), \n          size = 1.5, alpha = 0.005) + \n  geom_sf(data = daviesia_map_data, \n          aes(geometry = overlap), \n          colour = \"#FF925C\", fill = \"#FF925C\") + \n  geom_sf(data = daviesia_map_data, \n          aes(geometry = points, \n              colour = species), \n          size = 0.9) + \n  scale_colour_manual(values = c(\"#023E50\", \"#7B8A6A\", \"#3C908E\" )) + \n  scale_fill_manual(values = c(\"#023E50\", \"#7B8A6A\", \"#3C908E\")) + \n  guides(colour = guide_legend(override.aes = list(alpha = 1))) + \n  coord_sf(xlim = c(140, 158),\n           ylim = c(-23, -43)) +\n  theme(legend.title= element_blank(),\n        legend.position = \"bottom\") \n\n# Inset 1\ndaviesia_inset_1 <- daviesia_main_map +\ncoord_sf(\n    xlim = c(145.5 , 150.3),\n    ylim = c(-35, -37.95),\n    expand = FALSE\n  ) + \n  theme_void() +\n  theme(legend.position = \"none\",\n        panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.3))\n\n# Inset 2\ndaviesia_inset_2 <- daviesia_main_map +\n  coord_sf(\n    xlim = c(151.55 , 152.75),\n    ylim = c(-28.6, -31.25),\n    expand = FALSE\n  ) + \n  theme_void() +\n  theme(legend.position = \"none\",\n        panel.border = element_rect(colour = \"black\", fill = NA, linewidth = 0.3))\n\n# Drawing the inset boxes on main map\ndaviesia_bbox <- daviesia_main_map + \n   geom_rect(aes(xmin = 145.5, xmax = 150.3, # Inset 1\n             ymin = -35, ymax = -37.95),\n             colour = \"black\",\n             fill = NA, linewidth = 0.2) + \n  geom_rect(aes(xmin = 151.55, xmax = 152.75, # Inset 2\n             ymin = -28.6, ymax = -31.25),\n             colour = \"black\",\n             fill = NA, linewidth = 0.2) \n\n# Daviesia plot with insets \ndaviesia_combined <- ggdraw(daviesia_bbox) +\n  draw_plot(daviesia_inset_1, x = 0.59, y = 0.15, \n            width = 0.42, height = 0.30) +\n  draw_plot(daviesia_inset_2, x = 0.52, y = 0.52, \n            width = 0.5, height = 0.4)\n\ndaviesia_combined\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n\n# Final thoughts\n\nIn natural catastrophes, decision makers have limited time to act. They need ready-to-go data and workflows to assess and manage possible consequences of the catastrophe and any proposed ways to mitigate it. Here, we used [curated datasets](https://data.csiro.au/collection/csiro:56679) of Australian invertebrates and vascular plants to illustrate how concave hulls can represent estimate species range and estimate range overlap with natural disasters. We hope our work can aid future assessments of vulnerable species and help prioritise conservation efforts.\n\n::: {.callout-note icon=\"false\"}\n# Acknowledgement:\n\nThe work in this post is part of a project titled: Curated biodiversity data for rapid assessment of bushfire impact. This project is funded by the [Australian Research Data Commons (ARDC) bushfire data challenges program](https://ardc.edu.au/program/bushfire-data-challenges/).\n:::\n\n<details>\n\n<summary style=\"color: #E06E53;\">\n\nExpand for session info\n\n</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2024-02-12\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version date (UTC) lib source\n concaveman     * 1.1.0   2020-05-11 [1] CRAN (R 4.3.2)\n cowplot        * 1.1.1   2020-12-30 [1] CRAN (R 4.3.2)\n dplyr          * 1.1.4   2023-11-17 [1] CRAN (R 4.3.2)\n forcats        * 1.0.0   2023-01-29 [1] CRAN (R 4.3.2)\n ggplot2        * 3.4.4   2023-10-12 [1] CRAN (R 4.3.1)\n ggpointdensity * 0.1.0   2019-08-28 [1] CRAN (R 4.3.2)\n gt             * 0.10.0  2023-10-07 [1] CRAN (R 4.3.2)\n here           * 1.0.1   2020-12-13 [1] CRAN (R 4.3.2)\n htmltools      * 0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n lubridate      * 1.9.3   2023-09-27 [1] CRAN (R 4.3.2)\n ozmaps         * 0.4.5   2021-08-03 [1] CRAN (R 4.3.2)\n patchwork      * 1.1.3   2023-08-14 [1] CRAN (R 4.3.1)\n purrr          * 1.0.2   2023-08-10 [1] CRAN (R 4.3.2)\n readr          * 2.1.4   2023-02-10 [1] CRAN (R 4.3.2)\n rmapshaper     * 0.5.0   2023-04-11 [1] CRAN (R 4.3.2)\n sessioninfo    * 1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf             * 1.0-14  2023-07-11 [1] CRAN (R 4.3.2)\n stringr        * 1.5.1   2023-11-14 [1] CRAN (R 4.3.2)\n tibble         * 3.2.1   2023-03-20 [1] CRAN (R 4.3.2)\n tidyr          * 1.3.0   2023-01-24 [1] CRAN (R 4.3.2)\n tidyverse      * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n viridis        * 0.6.4   2023-07-22 [1] CRAN (R 4.3.2)\n viridisLite    * 0.4.2   2023-05-02 [1] CRAN (R 4.3.1)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.3.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}