{
  "hash": "81cfb3a4be74d5abae74aa8f71f39b90",
  "result": {
    "markdown": "---\ntitle: \"Animated species distribution maps with {gifski}\"\ndescription: |\n  One useful way to see changes in a species' habitat range over time is by using animation to view multiple distributions in succession. Here we will model the distribution of *Nudibranchia* across Australia each month to create an animated GIF of its distribution over a year.   \nauthor:\n  - name: \"Stephanie Woolley\"\n  - name: \"Olivia Torresan\"\n  - name: \"Dax Kellie\"\ndate: \"2023-03-14\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 3\ncategories:\n  - Eukaryota\n  - Animalia\n  - Mollusca\n  - Maps\n  - Intern-post\nimage: SDM.gif\nfreeze: true\n---\n\n\n\n\n<!-- remove metadata section -->\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\nStephanie Woolley  \n[Olivia Torresan](https://labs.ala.org.au/people/Torresan_Olivia/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n14 March 2023\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/steph.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\n:::{.callout-tip}\n\n## Intern Post\n\n:::\n\nEach species has a habitat range where it normally lives and can expect to be found over its lifetime. However, individuals of a species rarely stay in the same spot for long periods of time. Just like us, they react to changes in their environment, interactions with other species, and interactions with other individuals. \n\nAs a result, it can be useful to see how a distribution of a species changes in space *and* over time. In marine environments, for example, seemingly small changes in [temperature](https://theconversation.com/the-mediterranean-has-experienced-record-sea-temperatures-this-summer-this-could-devastate-marine-life-188995), [chemicals](https://theconversation.com/marine-life-in-a-south-african-bay-is-full-of-chemical-pollutants-182791) and [light](https://theconversation.com/the-moon-and-stars-are-a-compass-for-nocturnal-animals-but-light-pollution-is-leading-them-astray-142301) can result in large changes to a species' distribution.\n\nHere we will map the distribution of *Nudibranchia* around Australia each month as an animated map to see how nudibranch distributions change over the year. \n\nThis post is inspired by [Liam Bailey's](https://twitter.com/ldbailey255) cool (and hilarious) [Bigfoot distribution map](https://twitter.com/ldbailey255/status/1575541015951593472). You can find his code  [here](https://github.com/LiamDBailey/TidyTuesday/blob/93cbe1143757c97ddaf36c564ac03a2b8088cb56/R/2022/Week37_2022.qmd).\n\n\n# Download data\n\n## Occurrence data\n\nLet's first download observations of *Nudibranchia* across Australia.\n\n:::{layout-ncol=3 style=\"width=120px;\"}\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/e/f/0/2/4dc32b90-06fe-473b-ba59-1d05779c20fe/original\"></img>\n\n<img class = \"clipped\"src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/0/c/4/4/25048175-ab79-48c8-bea3-8f09242544c0/original\"></img>\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/e/a/d/0/bf20b383-5812-4121-b5b7-44c0493f0dae/original\"></img>\n\n:::\n::: {.figure-caption}\nLeft: [*Doriprismatica atromarginata* (diana88jingfung CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/4a9786d3-f68f-4bbe-9eae-38b83849ae89) Middle: [*Ceratosoma amoenum* (Erik Schlogl CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/fde8a631-e295-4334-87fc-659e2f650e08) Right: [*Pteraeolidia ianthina* (Jallitt CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/c5bf023e-a19d-4e75-8265-009e3493c9ef)\n:::\n\nWe'll load the necessary packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(galah)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(lubridate)\nlibrary(stars)         # Raster management \nlibrary(ozmaps)        # Australian map\nlibrary(SSDM)          # Linear modelling\nlibrary(sdmpredictors) # Environmental variables \nlibrary(grDevices)     # Colours and fonts\nlibrary(maps)          # Cities for map\nlibrary(tmaptools)     # Create plot ratio\nlibrary(gifski)        # Create GIF\nlibrary(knitr)         # View GIF\n```\n:::\n\n  \nNow we will use the {`galah`} package to download observations of *Nudibranchia*.\n\nYou will need to provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) to `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add registered email (register at ala.org.au)\ngalah_config(email = \"your-email@email.com\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download observations\nnudibranch_occurrences <- \n  galah_call() |>                               \n  galah_identify(\"Nudibranchia\") |>   \n  galah_filter(country == \"Australia\") |>\n  galah_apply_profile(ALA) |> # ALA's set of data cleaning filters\n  atlas_occurrences() \n```\n:::\n\n\n## Environmental variables \n\nNow we will download our environmental variables for our model.\n\nFor our *Nudibranchia* model, we will use 4 common marine environmental variables: \n\n  * Sea surface temperature \n  * Sea surface salinity \n  * Distance to shore \n  * Bathymetry \n\nTo get them, we'll use `load_layers()` from the [{sdmpredictors} package](https://github.com/lifewatch/sdmpredictors) to download our variables as raster layers (geographic layers that have a value per pixel of our variable). We'll use the `rasterstack` argument to combine our layers into one object.\n\n:::{.callout-note}\nThe {sdmpredictors} package has lots of data sets and layers available. [Check out their website to learn more](http://lifewatch.github.io/sdmpredictors/articles/quickstart.html).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download variables\nenv <- load_layers(layercodes = c(\"MS_biogeo08_sss_mean_5m\", \n                                  \"MS_biogeo13_sst_mean_5m\", \n                                  \"MS_biogeo05_dist_shore_5m\", \n                                  \"MS_bathy_5m\"), \n                   equalarea = FALSE, \n                   rasterstack = TRUE)\n```\n:::\n\n\nTo prepare variable data for our model, we need to crop the geographical boundaries of our data to include *only* the coast (and surrounding ocean) of Australia. With the help of the {raster} package, we'll use `extent()` to set the outer boundaries and `crop()` to remove the land.\n\n\n::: {.cell fig.aligh='center'}\n\n```{.r .cell-code}\n# Create extent\naus_ext <- raster::extent(100, 165, -45, -10)\n\n# Limit environmental variables\naus_env <- raster::crop(env, aus_ext) \n\n# Check variables \nplot(aus_env)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/plot-layers-1.png){width=672}\n:::\n:::\n\n\n\n# Prepare data\n\nTo construct our animated GIF, we can make each \"frame\" of our animation a species distribution map of each month - that means 12 maps, January to December. \n\nIn order to do this, we'll create a set of custom functions that:\n\n  1. Filter all observations to only observations of a specific month, \n  2. Run a species distribution model on those observations\n  3. Plot the results onto a map\n  4. Save the maps\n\nBy making custom functions for these tasks, we'll be able to run each function in a loop, letting us do each thing 12 times for each of our 12 months.\n \nAt the end, we'll stitch our 12 maps together and, *Voila*! We'll officially be animators (Pixar here we come!).\n\nFirst we'll filter out `NA` values and duplicates (which might cause our model to error) and extract the month of observation into its own column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean, filter and convert time series to months \noccurrences_clean <- \n  nudibranch_occurrences |> \n  filter(!is.na(decimalLatitude) & !is.na(decimalLongitude)) |>\n  filter(!duplicated(decimalLatitude) & !duplicated(decimalLongitude)) |>\n  mutate(month = month(eventDate)) |>\n  select(month, decimalLatitude, decimalLongitude) \n\nhead(occurrences_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 3\n  month decimalLatitude decimalLongitude\n  <dbl>           <dbl>            <dbl>\n1    12           -55.1            159. \n2     3           -54.5            159. \n3    NA           -52.4             71.9\n4     1           -45.1            146. \n5     1           -44.3            147. \n6     1           -44.3            147. \n```\n:::\n:::\n\n\nFrom here, we'll make our own function `make_months_df()` that filters our overall observations to only those of our chosen month. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build function (for each month select the lat and long)\nmake_months_df <- function(chosen_month) {\n  monthly_data <- occurrences_clean %>% \n    filter(month == {{chosen_month}}) %>%\n    select(decimalLatitude, decimalLongitude)\n}\n```\n:::\n\n\nWith the help of `purrr::map()` we can run a loop over our `make_months_df()` function to return our 12 `data.frame`s in one `list`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_months <- c(1:12)\nmonth_list <- purrr::map(n_months, make_months_df)\n\nmonth_list[[1]] # See output of month 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,560 Ã— 2\n   decimalLatitude decimalLongitude\n             <dbl>            <dbl>\n 1           -45.1             146.\n 2           -44.3             147.\n 3           -44.3             147.\n 4           -43.1             148.\n 5           -43.1             147.\n 6           -43.0             148.\n 7           -42.6             148.\n 8           -41.9             148.\n 9           -41.2             146.\n10           -41.1             146.\n# â€¦ with 1,550 more rows\n```\n:::\n:::\n\n\n\n\n# Species Distribution Model\n\nNow that `month_list` contains our 12 `data.frame`s, we can run some models with them to calculate a distribution surface. \n\nTo build our overall Species Distribution Model (SDM) we've chosen to use [the method used by Liam Bailey in his Bigfoot map](https://github.com/LiamDBailey/TidyTuesday/blob/93cbe1143757c97ddaf36c564ac03a2b8088cb56/R/2022/Week37_2022.qmd). It's a fairly flexible model that suits our purposes to quickly see where nudibranchs are observed around Australia.\n\nWe'll build another custom function to run these models called `run_sdm_model()` for each chosen month.\n\n:::{.callout-note}\nThis SDM method merges the results from several models into one final value using [Fisher's combined probability](https://en.wikipedia.org/wiki/Fisher%27s_method). It's by no means the most robust SDM. If you are trying to make a more informative species distribution model, it might be worth considering [other methods](https://www.frontiersin.org/articles/10.3389/fmars.2017.00421/full)!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Species distribution model function\nrun_sdm_model <- function(chosen_month) {\n  SDM_GLM <- modelling(\"GLM\",\n    Occurrences = (chosen_month),\n    Env = aus_env,\n    Xcol = \"decimalLongitude\",\n    Ycol = \"decimalLatitude\",\n    verbose = FALSE\n  )\n  SDM_MARS <- modelling(\"MARS\",\n    Occurrences = (chosen_month),\n    Env = aus_env,\n    Xcol = \"decimalLongitude\",\n    Ycol = \"decimalLatitude\",\n    verbose = FALSE\n  )\n  SDM_CTA <- modelling(\"CTA\",\n    Occurrences = (chosen_month),\n    Env = aus_env,\n    Xcol = \"decimalLongitude\",\n    Ycol = \"decimalLatitude\",\n    verbose = FALSE\n  )\n\n  # Calculate single value using Fisher's combined probability\n  combined <- -2 * (log(SDM_MARS@projection) + log(SDM_GLM@projection) + log(SDM_CTA@projection))\n  Chi_sq <- function(x) {1 - pchisq(q = x, df = 6)}\n  combined_pval <- raster::calc(combined, fun = Chi_sq)\n\n  # Convert to spatial object\n  species_distribution <- stars::st_as_stars(combined_pval)\n  return(species_distribution)\n}\n```\n:::\n\n\nNow we can use `purrr::map()` to run another loop to return results of our 12 SDMs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run & save models\nmodel_list <- purrr::map(month_list, run_sdm_model) \n```\n:::\n\n\n# Map\n\nWe now have the results of our 12 SDMs in `model_list`. We can use these results to make 12 maps.\n\nTo help orient ourselves, let's download point data of the main cities in Australia from the {maps} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_names <- c(\"Sydney\", \"Melbourne\", \"Brisbane\", \"Cairns\", \n                \"Canberra\", \"Adelaide\", \"Melbourne\", \"Perth\", \"Darwin\")\n\ncities <- world.cities |>\n  filter(country.etc == \"Australia\") |>\n  filter(name %in% city_names)\n```\n:::\n\n\nLet's also make a nice colour palette:\n\n\n::: {.cell .fig-column-margin}\n\n```{.r .cell-code}\nblue_yellow <- c( \"#184E77\", \"#1E6091\",  \"#168AAD\",  \"#34A0A4\",  \"#52B69A\", \n                  \"#76C893\", \"#99D98C\", \"#B5E48C\",  \"#D9ED92\")\n\ncolour_palette <- colorRampPalette(blue_yellow)(50)\nfeathers::print_pal(colour_palette)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNow we are ready to make maps of our results! \n\nWe'll once again make a custom function `make_the_map()` to construct each map. This function not only constructs our maps, but adds each month's 3-letter abbreviation `month_label` to the top of each map for our eventual animation.\n\nFor this, let's make some month labels: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get label for each month\nmonth_label <- month(1:12, label = TRUE)\nmonth_label\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n```\n:::\n:::\n\n\nAnd now we'll create our `make_the_map()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map making function (for monthly SDM build this map)\nmake_the_map <- function(model_data, month_label) {\n\n  month <- {{month_label}}\n  \n  ggplot() +\n    geom_stars(data = model_data) +\n    geom_sf(data = ozmaps::ozmap_states, \n            colour = \"#A9A793\", \n            fill = \"#C8C6AF\") +\n    coord_sf(crs = \"WGS84\",\n             xlim = c(112, 154), \n             ylim = c(-43, -11)) + \n    scale_fill_gradientn(colours = c(colour_palette),\n                         limits = c(0, 1),\n                         guide = guide_colourbar(\n                           title = \"Occurrence\\nprobability\",\n                           title.theme = element_text(\n                             family = \"Times New Roman\",\n                             colour = \"#3D4040\",\n                             size = 10,\n                             face = \"bold\"),\n                           label.theme = element_text(\n                             colour = \"#3D4040\",\n                             size = 8),\n                           ticks = FALSE,\n                           frame.colour = \"#3D4040\",\n                           title.position = \"top\",\n                           title.vjust = 2,\n                           label.position = \"left\"),\n                         breaks = c(0, 0.5, 1),\n                         labels = c(\"0%\", \"50%\", \"100%\")) +\n    # Title map with month\n    labs(title = glue(\"{month_label}\")) + \n    theme_void() +\n    theme(\n      legend.position = c(1.2, 0.2), # reposition legend\n      plot.title = element_text(size = 26),\n      legend.direction = \"vertical\",\n      plot.background = element_rect(fill = \"#FFFFFF\", colour = NA),\n      plot.margin = unit(c(0.01, 2.5, 0.1, 0.1), \"cm\")) +\n    # Add city points\n    geom_point(data = cities, \n               aes(x = long, y = lat), \n               size = 2,\n               colour = \"#782717\",\n               fill = \"white\",\n               shape = 21) +\n    # Add city labels\n    ggrepel::geom_text_repel(data = cities, \n              aes(x = long, y = lat, label = name), \n              colour = \"white\",\n              nudge_x = .12, nudge_y = .1, \n              hjust = \"inward\",\n              vjust = \"inward\",\n              fontface = \"bold\",\n              size = 6.8,\n              family = \"Times New Roman\")\n}\n```\n:::\n\n\n\nWe can use `map2()` to make all of our maps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate maps\nall_maps <- model_list %>%\n  map2(\n    .x = .,\n    .y = month_label,\n    .f = make_the_map\n  )\n```\n:::\n\n\nNow to save our maps. We'll assign our plots a letter so they are ordered alphabetically and saved in order in a new folder called `maps`.\n\nTo figure out the best aspect ratio to save our maps, we'll use the `get_asp_ratio()` function from the {tmaptools} package, and use it calculate the width of our plots. Finally, we can use `purrr::walk2()` to loop through `ggsave()` and save our maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set names of plots to save\nletter_id <- as.list(letters[1:12]) # saves in correct order for gif\nplotnames <- purrr::map(letter_id, ~glue(\"maps/map_{.x}.png\")) \n\n# save plots\nplot_ratio <- get_asp_ratio(model_list[[1]]) # aspect ratio\n\nwalk2(plotnames, all_maps, ~ggsave(filename = .x, \n                                   plot = .y, \n                                   height = 9, \n                                   width = plot_ratio*10))\n```\n:::\n\n\nWe should now have 12 species distribution maps saved, and we can see them by returning all the files in our `maps` folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_files <- list.files(path = \"maps/\")\nmap_files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"map_a.png\" \"map_b.png\" \"map_c.png\" \"map_d.png\" \"map_e.png\" \"map_f.png\"\n [7] \"map_g.png\" \"map_h.png\" \"map_i.png\" \"map_j.png\" \"map_k.png\" \"map_l.png\"\n```\n:::\n:::\n\n\n\n# Make GIF\n\nFor context before we see our animation, let's first look at the distribution of all nudibranchs across Australia (this uses all the same code as above, but without all the looping)\n\n\n::: {.cell .column-page layout-align=\"center\" height='12'}\n\n```{.r .cell-code  code-fold=\"true\"}\n## Run the 3 models on our data\nSDM_GLM <- modelling(\"GLM\",\n                     Occurrences = occurrences_clean,\n                     Env = aus_env,\n                     Xcol = 'decimalLongitude', \n                     Ycol = 'decimalLatitude', \n                     verbose = FALSE) \nSDM_MARS <- modelling(\"MARS\",\n                      Occurrences = occurrences_clean,\n                      Env = aus_env,\n                      Xcol = 'decimalLongitude', \n                      Ycol = 'decimalLatitude', \n                      verbose = FALSE)\nSDM_CTA <- modelling(\"CTA\",\n                     Occurrences = occurrences_clean,\n                     Env = aus_env,\n                     Xcol = 'decimalLongitude', \n                     Ycol = 'decimalLatitude', \n                     verbose = FALSE)\n\ncombined <- -2 * (log(SDM_MARS@projection) + log(SDM_GLM@projection) + log(SDM_CTA@projection))\nChi_sq <- function(x){1 - pchisq(q = x, df = 6)}\ncombined_pval <- raster::calc(combined, fun = Chi_sq) \nspecies_distribution <- stars::st_as_stars(combined_pval) \n\n\n## MAP \n\nggplot() +\n  geom_stars(data = species_distribution) + # Plot SDM results\n  geom_sf(data = ozmaps::ozmap_country, # Add Australian map\n          colour = \"grey\", \n          fill = \"#C8C6AF\") + \n  coord_sf(crs = \"WGS84\", # Set geographical boundaries\n           xlim = c(112, 154), \n           ylim = c(-43, -11)) + \n  scale_fill_gradientn(\n    colours = c(colour_palette), # Use custom palette\n    limits = c(0, 1),\n    guide = guide_colourbar(\n      title = \"Occurrence probability\", # title of legend\n      title.theme = element_text( # style legend title\n        family = \"Times New Roman\", \n        colour = \"#B3B6B6\",\n        face = \"bold\",\n        size = 12),\n      label.theme = element_text( # style legend text\n        colour = \"#B3B6B6\", \n        size = 10),\n      ticks = FALSE,\n      frame.colour = \"#B3B6B6\",\n      title.position = \"top\"),\n    breaks = c(0, 0.5, 1),\n    labels = c(\"0%\", \"50%\", \"100%\")\n  ) + \n  theme_void() +\n  theme(\n    legend.position = c(0.2, 0.1),\n    legend.direction = \"horizontal\",\n    legend.key.size = unit(5, \"mm\"),\n    plot.background = element_rect(fill = \"#F7F7F3\", color = \"#F16704\"),\n    panel.border = element_rect(color = \"#FFFFFF\", fill = NA, size = 2)\n    )\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/aus-map-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nLooks like there are nudibranchs along pretty much the entire coastline of Australia!\n\nTo finish our animation, let's stick our 12 monthly maps together with the [{gifski} package](https://github.com/r-rust/gifski):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create animation\ngifski(glue(\"maps/{map_files}\"), gif_file = \"SDM.gif\", delay = 0.5, \n       width = ((plot_ratio*10)*96)*.8, height = (9*96)*.8) # correct ratios\n```\n:::\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"SDM.gif\")\n```\n\n::: {.cell-output-display}\n![](SDM.gif){fig-align='center'}\n:::\n:::\n\n\nWe now have our animated GIF! Our animation shows that nudibranchs can be observed all year long, though there are some months where you are more likely to observe nudibranchs in more places than others.\n\nHowever, when data are broken down into smaller and smaller groups (which often happens over the course of an entire analysis), we increase the chance of *uncertainty* in our results.\n\nUncertainty can grow when we use fewer observations to predict our distributions because with less information, our predictions are more strongly swayed by outliers. In our case, there are more observations of nudibranchs from October-January and fewer from May-August. Although it's very possible uncertainty had an effect on the patterns we see in our final animation, you can't tell from seeing our animation on its own!\n\n:::{.column-margin}\n\n::: {.cell}\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n:::\n\n# Final thoughts\n\nWe hope you've felt the thrill of constructing your own stop-motion animation with {ggplot2} and {gifski}!\n\nIf you are interested in making animations of other types of plots, check out the [{gganimate} package](https://gganimate.com/articles/gganimate.html) or the [{plotly} package](https://plotly.com/ggplot2/animations/), too!\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nâ”€ Session info â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2023-03-16\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\nâ”€ Packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n package       * version date (UTC) lib source\n abind         * 1.4-5   2016-07-21 [1] CRAN (R 4.2.0)\n dplyr         * 1.1.0   2023-01-29 [1] CRAN (R 4.2.2)\n forcats       * 1.0.0   2023-01-29 [1] CRAN (R 4.2.2)\n galah         * 1.5.1   2023-02-21 [1] Github (AtlasOfLivingAustralia/galah@bd43dd2)\n ggplot2       * 3.4.1   2023-02-10 [1] CRAN (R 4.2.2)\n gifski        * 1.6.6-1 2022-04-05 [1] CRAN (R 4.2.1)\n glue          * 1.6.2   2022-02-24 [1] CRAN (R 4.2.1)\n htmltools     * 0.5.4   2022-12-07 [1] CRAN (R 4.2.2)\n knitr         * 1.40    2022-08-24 [1] CRAN (R 4.2.1)\n lubridate     * 1.9.2   2023-02-10 [1] CRAN (R 4.2.2)\n maps          * 3.4.0   2021-09-25 [1] CRAN (R 4.2.1)\n ozmaps        * 0.4.5   2021-08-03 [1] CRAN (R 4.2.1)\n purrr         * 1.0.1   2023-01-10 [1] CRAN (R 4.2.2)\n readr         * 2.1.4   2023-02-10 [1] CRAN (R 4.2.2)\n sdmpredictors * 0.2.13  2022-09-13 [1] CRAN (R 4.2.1)\n sessioninfo   * 1.2.2   2021-12-06 [1] CRAN (R 4.2.1)\n sf            * 1.0-9   2022-11-08 [1] CRAN (R 4.2.2)\n SSDM          * 0.2.8   2020-02-28 [1] CRAN (R 4.2.1)\n stars         * 0.5-6   2022-07-21 [1] CRAN (R 4.2.1)\n stringr       * 1.5.0   2022-12-02 [1] CRAN (R 4.2.2)\n tibble        * 3.1.8   2022-07-22 [1] CRAN (R 4.2.1)\n tidyr         * 1.3.0   2023-01-24 [1] CRAN (R 4.2.2)\n tidyverse     * 2.0.0   2023-02-22 [1] CRAN (R 4.2.2)\n tmaptools     * 3.1-1   2021-01-19 [1] CRAN (R 4.2.2)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.2.2/library\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}